
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.24.1
 * Query Engine version: 18095475d5ee64536e2f93995e48ad800737a9e4
 */
Prisma.prismaVersion = {
  client: "2.24.1",
  engine: "18095475d5ee64536e2f93995e48ad800737a9e4"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.HospitalScalarFieldEnum = makeEnum({
  ID: 'ID',
  Name: 'Name',
  Phone: 'Phone',
  Address: 'Address',
  IsolationBeds: 'IsolationBeds',
  NormalBeds: 'NormalBeds',
  Ventilators: 'Ventilators'
});

exports.Prisma.PatientScalarFieldEnum = makeEnum({
  ID: 'ID',
  Name: 'Name',
  IsEmergency: 'IsEmergency',
  bloodBankID: 'bloodBankID',
  oxygenBankID: 'oxygenBankID',
  hospitalID: 'hospitalID',
  ambulanceServiceId: 'ambulanceServiceId'
});

exports.Prisma.BloodBankScalarFieldEnum = makeEnum({
  ID: 'ID',
  Name: 'Name',
  Incharge: 'Incharge',
  Address: 'Address'
});

exports.Prisma.OxygenBankScalarFieldEnum = makeEnum({
  ID: 'ID',
  Name: 'Name',
  Phone: 'Phone',
  Address: 'Address'
});

exports.Prisma.AmbulanceServiceScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  Phone: 'Phone',
  Address: 'Address'
});

exports.Prisma.MedicalShopScalarFieldEnum = makeEnum({
  Id: 'Id',
  Name: 'Name',
  Phone: 'Phone',
  Address: 'Address'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  Hospital: 'Hospital',
  Patient: 'Patient',
  BloodBank: 'BloodBank',
  OxygenBank: 'OxygenBank',
  AmbulanceService: 'AmbulanceService',
  MedicalShop: 'MedicalShop'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
