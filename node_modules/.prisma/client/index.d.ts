
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Hospital
 */

export type Hospital = {
  ID: number
  Name: string
  Phone: number
  Address: string
  IsolationBeds: number
  NormalBeds: number
  Ventilators: number
}

/**
 * Model Patient
 */

export type Patient = {
  ID: number
  Name: string
  IsEmergency: boolean
  bloodBankID: number
  oxygenBankID: number
  hospitalID: number
  ambulanceServiceId: number
}

/**
 * Model BloodBank
 */

export type BloodBank = {
  ID: number
  Name: string
  Incharge: string
  Address: string
}

/**
 * Model OxygenBank
 */

export type OxygenBank = {
  ID: number
  Name: string
  Phone: number
  Address: string
}

/**
 * Model AmbulanceService
 */

export type AmbulanceService = {
  Id: number
  Name: string
  Phone: number
  Address: string
}

/**
 * Model MedicalShop
 */

export type MedicalShop = {
  Id: number
  Name: string
  Phone: number
  Address: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Hospitals
 * const hospitals = await prisma.hospital.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Hospitals
   * const hospitals = await prisma.hospital.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.hospital`: Exposes CRUD operations for the **Hospital** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hospitals
    * const hospitals = await prisma.hospital.findMany()
    * ```
    */
  get hospital(): Prisma.HospitalDelegate<GlobalReject>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<GlobalReject>;

  /**
   * `prisma.bloodBank`: Exposes CRUD operations for the **BloodBank** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BloodBanks
    * const bloodBanks = await prisma.bloodBank.findMany()
    * ```
    */
  get bloodBank(): Prisma.BloodBankDelegate<GlobalReject>;

  /**
   * `prisma.oxygenBank`: Exposes CRUD operations for the **OxygenBank** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OxygenBanks
    * const oxygenBanks = await prisma.oxygenBank.findMany()
    * ```
    */
  get oxygenBank(): Prisma.OxygenBankDelegate<GlobalReject>;

  /**
   * `prisma.ambulanceService`: Exposes CRUD operations for the **AmbulanceService** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AmbulanceServices
    * const ambulanceServices = await prisma.ambulanceService.findMany()
    * ```
    */
  get ambulanceService(): Prisma.AmbulanceServiceDelegate<GlobalReject>;

  /**
   * `prisma.medicalShop`: Exposes CRUD operations for the **MedicalShop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MedicalShops
    * const medicalShops = await prisma.medicalShop.findMany()
    * ```
    */
  get medicalShop(): Prisma.MedicalShopDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.24.1
   * Query Engine version: 18095475d5ee64536e2f93995e48ad800737a9e4
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Hospital: 'Hospital',
    Patient: 'Patient',
    BloodBank: 'BloodBank',
    OxygenBank: 'OxygenBank',
    AmbulanceService: 'AmbulanceService',
    MedicalShop: 'MedicalShop'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Hospital
   */


  export type AggregateHospital = {
    _count: HospitalCountAggregateOutputType | null
    count: HospitalCountAggregateOutputType | null
    _avg: HospitalAvgAggregateOutputType | null
    avg: HospitalAvgAggregateOutputType | null
    _sum: HospitalSumAggregateOutputType | null
    sum: HospitalSumAggregateOutputType | null
    _min: HospitalMinAggregateOutputType | null
    min: HospitalMinAggregateOutputType | null
    _max: HospitalMaxAggregateOutputType | null
    max: HospitalMaxAggregateOutputType | null
  }

  export type HospitalAvgAggregateOutputType = {
    ID: number | null
    Phone: number | null
    IsolationBeds: number | null
    NormalBeds: number | null
    Ventilators: number | null
  }

  export type HospitalSumAggregateOutputType = {
    ID: number | null
    Phone: number | null
    IsolationBeds: number | null
    NormalBeds: number | null
    Ventilators: number | null
  }

  export type HospitalMinAggregateOutputType = {
    ID: number | null
    Name: string | null
    Phone: number | null
    Address: string | null
    IsolationBeds: number | null
    NormalBeds: number | null
    Ventilators: number | null
  }

  export type HospitalMaxAggregateOutputType = {
    ID: number | null
    Name: string | null
    Phone: number | null
    Address: string | null
    IsolationBeds: number | null
    NormalBeds: number | null
    Ventilators: number | null
  }

  export type HospitalCountAggregateOutputType = {
    ID: number
    Name: number
    Phone: number
    Address: number
    IsolationBeds: number
    NormalBeds: number
    Ventilators: number
    _all: number
  }


  export type HospitalAvgAggregateInputType = {
    ID?: true
    Phone?: true
    IsolationBeds?: true
    NormalBeds?: true
    Ventilators?: true
  }

  export type HospitalSumAggregateInputType = {
    ID?: true
    Phone?: true
    IsolationBeds?: true
    NormalBeds?: true
    Ventilators?: true
  }

  export type HospitalMinAggregateInputType = {
    ID?: true
    Name?: true
    Phone?: true
    Address?: true
    IsolationBeds?: true
    NormalBeds?: true
    Ventilators?: true
  }

  export type HospitalMaxAggregateInputType = {
    ID?: true
    Name?: true
    Phone?: true
    Address?: true
    IsolationBeds?: true
    NormalBeds?: true
    Ventilators?: true
  }

  export type HospitalCountAggregateInputType = {
    ID?: true
    Name?: true
    Phone?: true
    Address?: true
    IsolationBeds?: true
    NormalBeds?: true
    Ventilators?: true
    _all?: true
  }

  export type HospitalAggregateArgs = {
    /**
     * Filter which Hospital to aggregate.
     * 
    **/
    where?: HospitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hospitals to fetch.
     * 
    **/
    orderBy?: Enumerable<HospitalOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: HospitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hospitals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hospitals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Hospitals
    **/
    _count?: true | HospitalCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | HospitalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HospitalAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: HospitalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HospitalSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: HospitalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HospitalMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: HospitalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HospitalMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: HospitalMaxAggregateInputType
  }

  export type GetHospitalAggregateType<T extends HospitalAggregateArgs> = {
        [P in keyof T & keyof AggregateHospital]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHospital[P]>
      : GetScalarType<T[P], AggregateHospital[P]>
  }


    
    
  export type HospitalGroupByArgs = {
    where?: HospitalWhereInput
    orderBy?: Enumerable<HospitalOrderByInput>
    by: Array<HospitalScalarFieldEnum>
    having?: HospitalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HospitalCountAggregateInputType | true
    _avg?: HospitalAvgAggregateInputType
    _sum?: HospitalSumAggregateInputType
    _min?: HospitalMinAggregateInputType
    _max?: HospitalMaxAggregateInputType
  }


  export type HospitalGroupByOutputType = {
    ID: number
    Name: string
    Phone: number
    Address: string
    IsolationBeds: number
    NormalBeds: number
    Ventilators: number
    _count: HospitalCountAggregateOutputType | null
    _avg: HospitalAvgAggregateOutputType | null
    _sum: HospitalSumAggregateOutputType | null
    _min: HospitalMinAggregateOutputType | null
    _max: HospitalMaxAggregateOutputType | null
  }

  type GetHospitalGroupByPayload<T extends HospitalGroupByArgs> = Promise<
    Array<
      PickArray<HospitalGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof HospitalGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], HospitalGroupByOutputType[P]> 
            : GetScalarType<T[P], HospitalGroupByOutputType[P]>
        }
      > 
    >


  export type HospitalSelect = {
    ID?: boolean
    Name?: boolean
    Phone?: boolean
    Address?: boolean
    IsolationBeds?: boolean
    NormalBeds?: boolean
    Ventilators?: boolean
    Patient?: boolean | PatientFindManyArgs
  }

  export type HospitalInclude = {
    Patient?: boolean | PatientFindManyArgs
  }

  export type HospitalGetPayload<
    S extends boolean | null | undefined | HospitalArgs,
    U = keyof S
      > = S extends true
        ? Hospital
    : S extends undefined
    ? never
    : S extends HospitalArgs | HospitalFindManyArgs
    ?'include' extends U
    ? Hospital  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Patient'
        ? Array < PatientGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Hospital ?Hospital [P]
  : 
          P extends 'Patient'
        ? Array < PatientGetPayload<S['select'][P]>>  : never
  } 
    : Hospital
  : Hospital


  type HospitalCountArgs = Merge<
    Omit<HospitalFindManyArgs, 'select' | 'include'> & {
      select?: HospitalCountAggregateInputType | true
    }
  >

  export interface HospitalDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Hospital that matches the filter.
     * @param {HospitalFindUniqueArgs} args - Arguments to find a Hospital
     * @example
     * // Get one Hospital
     * const hospital = await prisma.hospital.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HospitalFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, HospitalFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Hospital'> extends True ? CheckSelect<T, Prisma__HospitalClient<Hospital>, Prisma__HospitalClient<HospitalGetPayload<T>>> : CheckSelect<T, Prisma__HospitalClient<Hospital | null >, Prisma__HospitalClient<HospitalGetPayload<T> | null >>

    /**
     * Find the first Hospital that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalFindFirstArgs} args - Arguments to find a Hospital
     * @example
     * // Get one Hospital
     * const hospital = await prisma.hospital.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HospitalFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, HospitalFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Hospital'> extends True ? CheckSelect<T, Prisma__HospitalClient<Hospital>, Prisma__HospitalClient<HospitalGetPayload<T>>> : CheckSelect<T, Prisma__HospitalClient<Hospital | null >, Prisma__HospitalClient<HospitalGetPayload<T> | null >>

    /**
     * Find zero or more Hospitals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hospitals
     * const hospitals = await prisma.hospital.findMany()
     * 
     * // Get first 10 Hospitals
     * const hospitals = await prisma.hospital.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const hospitalWithIDOnly = await prisma.hospital.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends HospitalFindManyArgs>(
      args?: SelectSubset<T, HospitalFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Hospital>>, PrismaPromise<Array<HospitalGetPayload<T>>>>

    /**
     * Create a Hospital.
     * @param {HospitalCreateArgs} args - Arguments to create a Hospital.
     * @example
     * // Create one Hospital
     * const Hospital = await prisma.hospital.create({
     *   data: {
     *     // ... data to create a Hospital
     *   }
     * })
     * 
    **/
    create<T extends HospitalCreateArgs>(
      args: SelectSubset<T, HospitalCreateArgs>
    ): CheckSelect<T, Prisma__HospitalClient<Hospital>, Prisma__HospitalClient<HospitalGetPayload<T>>>

    /**
     * Create many Hospitals.
     *     @param {HospitalCreateManyArgs} args - Arguments to create many Hospitals.
     *     @example
     *     // Create many Hospitals
     *     const hospital = await prisma.hospital.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HospitalCreateManyArgs>(
      args?: SelectSubset<T, HospitalCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Hospital.
     * @param {HospitalDeleteArgs} args - Arguments to delete one Hospital.
     * @example
     * // Delete one Hospital
     * const Hospital = await prisma.hospital.delete({
     *   where: {
     *     // ... filter to delete one Hospital
     *   }
     * })
     * 
    **/
    delete<T extends HospitalDeleteArgs>(
      args: SelectSubset<T, HospitalDeleteArgs>
    ): CheckSelect<T, Prisma__HospitalClient<Hospital>, Prisma__HospitalClient<HospitalGetPayload<T>>>

    /**
     * Update one Hospital.
     * @param {HospitalUpdateArgs} args - Arguments to update one Hospital.
     * @example
     * // Update one Hospital
     * const hospital = await prisma.hospital.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HospitalUpdateArgs>(
      args: SelectSubset<T, HospitalUpdateArgs>
    ): CheckSelect<T, Prisma__HospitalClient<Hospital>, Prisma__HospitalClient<HospitalGetPayload<T>>>

    /**
     * Delete zero or more Hospitals.
     * @param {HospitalDeleteManyArgs} args - Arguments to filter Hospitals to delete.
     * @example
     * // Delete a few Hospitals
     * const { count } = await prisma.hospital.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HospitalDeleteManyArgs>(
      args?: SelectSubset<T, HospitalDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hospitals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hospitals
     * const hospital = await prisma.hospital.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HospitalUpdateManyArgs>(
      args: SelectSubset<T, HospitalUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Hospital.
     * @param {HospitalUpsertArgs} args - Arguments to update or create a Hospital.
     * @example
     * // Update or create a Hospital
     * const hospital = await prisma.hospital.upsert({
     *   create: {
     *     // ... data to create a Hospital
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Hospital we want to update
     *   }
     * })
    **/
    upsert<T extends HospitalUpsertArgs>(
      args: SelectSubset<T, HospitalUpsertArgs>
    ): CheckSelect<T, Prisma__HospitalClient<Hospital>, Prisma__HospitalClient<HospitalGetPayload<T>>>

    /**
     * Count the number of Hospitals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalCountArgs} args - Arguments to filter Hospitals to count.
     * @example
     * // Count the number of Hospitals
     * const count = await prisma.hospital.count({
     *   where: {
     *     // ... the filter for the Hospitals we want to count
     *   }
     * })
    **/
    count<T extends HospitalCountArgs>(
      args?: Subset<T, HospitalCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HospitalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Hospital.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HospitalAggregateArgs>(args: Subset<T, HospitalAggregateArgs>): PrismaPromise<GetHospitalAggregateType<T>>

    /**
     * Group by Hospital.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HospitalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HospitalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HospitalGroupByArgs['orderBy'] }
        : { orderBy?: HospitalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HospitalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHospitalGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Hospital.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HospitalClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Patient<T extends PatientFindManyArgs = {}>(args?: Subset<T, PatientFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Patient>>, PrismaPromise<Array<PatientGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Hospital findUnique
   */
  export type HospitalFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Hospital
     * 
    **/
    select?: HospitalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HospitalInclude | null
    /**
     * Throw an Error if a Hospital can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Hospital to fetch.
     * 
    **/
    where: HospitalWhereUniqueInput
  }


  /**
   * Hospital findFirst
   */
  export type HospitalFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Hospital
     * 
    **/
    select?: HospitalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HospitalInclude | null
    /**
     * Throw an Error if a Hospital can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Hospital to fetch.
     * 
    **/
    where?: HospitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hospitals to fetch.
     * 
    **/
    orderBy?: Enumerable<HospitalOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hospitals.
     * 
    **/
    cursor?: HospitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hospitals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hospitals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hospitals.
     * 
    **/
    distinct?: Enumerable<HospitalScalarFieldEnum>
  }


  /**
   * Hospital findMany
   */
  export type HospitalFindManyArgs = {
    /**
     * Select specific fields to fetch from the Hospital
     * 
    **/
    select?: HospitalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HospitalInclude | null
    /**
     * Filter, which Hospitals to fetch.
     * 
    **/
    where?: HospitalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hospitals to fetch.
     * 
    **/
    orderBy?: Enumerable<HospitalOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Hospitals.
     * 
    **/
    cursor?: HospitalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hospitals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hospitals.
     * 
    **/
    skip?: number
    distinct?: Enumerable<HospitalScalarFieldEnum>
  }


  /**
   * Hospital create
   */
  export type HospitalCreateArgs = {
    /**
     * Select specific fields to fetch from the Hospital
     * 
    **/
    select?: HospitalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HospitalInclude | null
    /**
     * The data needed to create a Hospital.
     * 
    **/
    data: XOR<HospitalCreateInput, HospitalUncheckedCreateInput>
  }


  /**
   * Hospital createMany
   */
  export type HospitalCreateManyArgs = {
    data: Enumerable<HospitalCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Hospital update
   */
  export type HospitalUpdateArgs = {
    /**
     * Select specific fields to fetch from the Hospital
     * 
    **/
    select?: HospitalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HospitalInclude | null
    /**
     * The data needed to update a Hospital.
     * 
    **/
    data: XOR<HospitalUpdateInput, HospitalUncheckedUpdateInput>
    /**
     * Choose, which Hospital to update.
     * 
    **/
    where: HospitalWhereUniqueInput
  }


  /**
   * Hospital updateMany
   */
  export type HospitalUpdateManyArgs = {
    data: XOR<HospitalUpdateManyMutationInput, HospitalUncheckedUpdateManyInput>
    where?: HospitalWhereInput
  }


  /**
   * Hospital upsert
   */
  export type HospitalUpsertArgs = {
    /**
     * Select specific fields to fetch from the Hospital
     * 
    **/
    select?: HospitalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HospitalInclude | null
    /**
     * The filter to search for the Hospital to update in case it exists.
     * 
    **/
    where: HospitalWhereUniqueInput
    /**
     * In case the Hospital found by the `where` argument doesn't exist, create a new Hospital with this data.
     * 
    **/
    create: XOR<HospitalCreateInput, HospitalUncheckedCreateInput>
    /**
     * In case the Hospital was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<HospitalUpdateInput, HospitalUncheckedUpdateInput>
  }


  /**
   * Hospital delete
   */
  export type HospitalDeleteArgs = {
    /**
     * Select specific fields to fetch from the Hospital
     * 
    **/
    select?: HospitalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HospitalInclude | null
    /**
     * Filter which Hospital to delete.
     * 
    **/
    where: HospitalWhereUniqueInput
  }


  /**
   * Hospital deleteMany
   */
  export type HospitalDeleteManyArgs = {
    where?: HospitalWhereInput
  }


  /**
   * Hospital without action
   */
  export type HospitalArgs = {
    /**
     * Select specific fields to fetch from the Hospital
     * 
    **/
    select?: HospitalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HospitalInclude | null
  }



  /**
   * Model Patient
   */


  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
    max: PatientMaxAggregateOutputType | null
  }

  export type PatientAvgAggregateOutputType = {
    ID: number | null
    bloodBankID: number | null
    oxygenBankID: number | null
    hospitalID: number | null
    ambulanceServiceId: number | null
  }

  export type PatientSumAggregateOutputType = {
    ID: number | null
    bloodBankID: number | null
    oxygenBankID: number | null
    hospitalID: number | null
    ambulanceServiceId: number | null
  }

  export type PatientMinAggregateOutputType = {
    ID: number | null
    Name: string | null
    IsEmergency: boolean | null
    bloodBankID: number | null
    oxygenBankID: number | null
    hospitalID: number | null
    ambulanceServiceId: number | null
  }

  export type PatientMaxAggregateOutputType = {
    ID: number | null
    Name: string | null
    IsEmergency: boolean | null
    bloodBankID: number | null
    oxygenBankID: number | null
    hospitalID: number | null
    ambulanceServiceId: number | null
  }

  export type PatientCountAggregateOutputType = {
    ID: number
    Name: number
    IsEmergency: number
    bloodBankID: number
    oxygenBankID: number
    hospitalID: number
    ambulanceServiceId: number
    _all: number
  }


  export type PatientAvgAggregateInputType = {
    ID?: true
    bloodBankID?: true
    oxygenBankID?: true
    hospitalID?: true
    ambulanceServiceId?: true
  }

  export type PatientSumAggregateInputType = {
    ID?: true
    bloodBankID?: true
    oxygenBankID?: true
    hospitalID?: true
    ambulanceServiceId?: true
  }

  export type PatientMinAggregateInputType = {
    ID?: true
    Name?: true
    IsEmergency?: true
    bloodBankID?: true
    oxygenBankID?: true
    hospitalID?: true
    ambulanceServiceId?: true
  }

  export type PatientMaxAggregateInputType = {
    ID?: true
    Name?: true
    IsEmergency?: true
    bloodBankID?: true
    oxygenBankID?: true
    hospitalID?: true
    ambulanceServiceId?: true
  }

  export type PatientCountAggregateInputType = {
    ID?: true
    Name?: true
    IsEmergency?: true
    bloodBankID?: true
    oxygenBankID?: true
    hospitalID?: true
    ambulanceServiceId?: true
    _all?: true
  }

  export type PatientAggregateArgs = {
    /**
     * Filter which Patient to aggregate.
     * 
    **/
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     * 
    **/
    orderBy?: Enumerable<PatientOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: PatientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: PatientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }


    
    
  export type PatientGroupByArgs = {
    where?: PatientWhereInput
    orderBy?: Enumerable<PatientOrderByInput>
    by: Array<PatientScalarFieldEnum>
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _avg?: PatientAvgAggregateInputType
    _sum?: PatientSumAggregateInputType
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }


  export type PatientGroupByOutputType = {
    ID: number
    Name: string
    IsEmergency: boolean
    bloodBankID: number
    oxygenBankID: number
    hospitalID: number
    ambulanceServiceId: number
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Promise<
    Array<
      PickArray<PatientGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], PatientGroupByOutputType[P]> 
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      > 
    >


  export type PatientSelect = {
    ID?: boolean
    Name?: boolean
    IsEmergency?: boolean
    Hospital?: boolean | HospitalArgs
    Ambulance?: boolean | AmbulanceServiceArgs
    BloodBank?: boolean | BloodBankArgs
    OxygenBank?: boolean | OxygenBankArgs
    bloodBankID?: boolean
    oxygenBankID?: boolean
    hospitalID?: boolean
    ambulanceServiceId?: boolean
  }

  export type PatientInclude = {
    Hospital?: boolean | HospitalArgs
    Ambulance?: boolean | AmbulanceServiceArgs
    BloodBank?: boolean | BloodBankArgs
    OxygenBank?: boolean | OxygenBankArgs
  }

  export type PatientGetPayload<
    S extends boolean | null | undefined | PatientArgs,
    U = keyof S
      > = S extends true
        ? Patient
    : S extends undefined
    ? never
    : S extends PatientArgs | PatientFindManyArgs
    ?'include' extends U
    ? Patient  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Hospital'
        ? HospitalGetPayload<S['include'][P]> :
        P extends 'Ambulance'
        ? AmbulanceServiceGetPayload<S['include'][P]> :
        P extends 'BloodBank'
        ? BloodBankGetPayload<S['include'][P]> :
        P extends 'OxygenBank'
        ? OxygenBankGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Patient ?Patient [P]
  : 
          P extends 'Hospital'
        ? HospitalGetPayload<S['select'][P]> :
        P extends 'Ambulance'
        ? AmbulanceServiceGetPayload<S['select'][P]> :
        P extends 'BloodBank'
        ? BloodBankGetPayload<S['select'][P]> :
        P extends 'OxygenBank'
        ? OxygenBankGetPayload<S['select'][P]> : never
  } 
    : Patient
  : Patient


  type PatientCountArgs = Merge<
    Omit<PatientFindManyArgs, 'select' | 'include'> & {
      select?: PatientCountAggregateInputType | true
    }
  >

  export interface PatientDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PatientFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PatientFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Patient'> extends True ? CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>> : CheckSelect<T, Prisma__PatientClient<Patient | null >, Prisma__PatientClient<PatientGetPayload<T> | null >>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PatientFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PatientFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Patient'> extends True ? CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>> : CheckSelect<T, Prisma__PatientClient<Patient | null >, Prisma__PatientClient<PatientGetPayload<T> | null >>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const patientWithIDOnly = await prisma.patient.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends PatientFindManyArgs>(
      args?: SelectSubset<T, PatientFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Patient>>, PrismaPromise<Array<PatientGetPayload<T>>>>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
    **/
    create<T extends PatientCreateArgs>(
      args: SelectSubset<T, PatientCreateArgs>
    ): CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>>

    /**
     * Create many Patients.
     *     @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     *     @example
     *     // Create many Patients
     *     const patient = await prisma.patient.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PatientCreateManyArgs>(
      args?: SelectSubset<T, PatientCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
    **/
    delete<T extends PatientDeleteArgs>(
      args: SelectSubset<T, PatientDeleteArgs>
    ): CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PatientUpdateArgs>(
      args: SelectSubset<T, PatientUpdateArgs>
    ): CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PatientDeleteManyArgs>(
      args?: SelectSubset<T, PatientDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PatientUpdateManyArgs>(
      args: SelectSubset<T, PatientUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
    **/
    upsert<T extends PatientUpsertArgs>(
      args: SelectSubset<T, PatientUpsertArgs>
    ): CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>>

    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PatientClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Hospital<T extends HospitalArgs = {}>(args?: Subset<T, HospitalArgs>): CheckSelect<T, Prisma__HospitalClient<Hospital | null >, Prisma__HospitalClient<HospitalGetPayload<T> | null >>;

    Ambulance<T extends AmbulanceServiceArgs = {}>(args?: Subset<T, AmbulanceServiceArgs>): CheckSelect<T, Prisma__AmbulanceServiceClient<AmbulanceService | null >, Prisma__AmbulanceServiceClient<AmbulanceServiceGetPayload<T> | null >>;

    BloodBank<T extends BloodBankArgs = {}>(args?: Subset<T, BloodBankArgs>): CheckSelect<T, Prisma__BloodBankClient<BloodBank | null >, Prisma__BloodBankClient<BloodBankGetPayload<T> | null >>;

    OxygenBank<T extends OxygenBankArgs = {}>(args?: Subset<T, OxygenBankArgs>): CheckSelect<T, Prisma__OxygenBankClient<OxygenBank | null >, Prisma__OxygenBankClient<OxygenBankGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * Throw an Error if a Patient can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Patient to fetch.
     * 
    **/
    where: PatientWhereUniqueInput
  }


  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * Throw an Error if a Patient can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Patient to fetch.
     * 
    **/
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     * 
    **/
    orderBy?: Enumerable<PatientOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     * 
    **/
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     * 
    **/
    distinct?: Enumerable<PatientScalarFieldEnum>
  }


  /**
   * Patient findMany
   */
  export type PatientFindManyArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * Filter, which Patients to fetch.
     * 
    **/
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     * 
    **/
    orderBy?: Enumerable<PatientOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     * 
    **/
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PatientScalarFieldEnum>
  }


  /**
   * Patient create
   */
  export type PatientCreateArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * The data needed to create a Patient.
     * 
    **/
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }


  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs = {
    data: Enumerable<PatientCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Patient update
   */
  export type PatientUpdateArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * The data needed to update a Patient.
     * 
    **/
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     * 
    **/
    where: PatientWhereUniqueInput
  }


  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs = {
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    where?: PatientWhereInput
  }


  /**
   * Patient upsert
   */
  export type PatientUpsertArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * The filter to search for the Patient to update in case it exists.
     * 
    **/
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     * 
    **/
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }


  /**
   * Patient delete
   */
  export type PatientDeleteArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * Filter which Patient to delete.
     * 
    **/
    where: PatientWhereUniqueInput
  }


  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs = {
    where?: PatientWhereInput
  }


  /**
   * Patient without action
   */
  export type PatientArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
  }



  /**
   * Model BloodBank
   */


  export type AggregateBloodBank = {
    _count: BloodBankCountAggregateOutputType | null
    count: BloodBankCountAggregateOutputType | null
    _avg: BloodBankAvgAggregateOutputType | null
    avg: BloodBankAvgAggregateOutputType | null
    _sum: BloodBankSumAggregateOutputType | null
    sum: BloodBankSumAggregateOutputType | null
    _min: BloodBankMinAggregateOutputType | null
    min: BloodBankMinAggregateOutputType | null
    _max: BloodBankMaxAggregateOutputType | null
    max: BloodBankMaxAggregateOutputType | null
  }

  export type BloodBankAvgAggregateOutputType = {
    ID: number | null
  }

  export type BloodBankSumAggregateOutputType = {
    ID: number | null
  }

  export type BloodBankMinAggregateOutputType = {
    ID: number | null
    Name: string | null
    Incharge: string | null
    Address: string | null
  }

  export type BloodBankMaxAggregateOutputType = {
    ID: number | null
    Name: string | null
    Incharge: string | null
    Address: string | null
  }

  export type BloodBankCountAggregateOutputType = {
    ID: number
    Name: number
    Incharge: number
    Address: number
    _all: number
  }


  export type BloodBankAvgAggregateInputType = {
    ID?: true
  }

  export type BloodBankSumAggregateInputType = {
    ID?: true
  }

  export type BloodBankMinAggregateInputType = {
    ID?: true
    Name?: true
    Incharge?: true
    Address?: true
  }

  export type BloodBankMaxAggregateInputType = {
    ID?: true
    Name?: true
    Incharge?: true
    Address?: true
  }

  export type BloodBankCountAggregateInputType = {
    ID?: true
    Name?: true
    Incharge?: true
    Address?: true
    _all?: true
  }

  export type BloodBankAggregateArgs = {
    /**
     * Filter which BloodBank to aggregate.
     * 
    **/
    where?: BloodBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BloodBanks to fetch.
     * 
    **/
    orderBy?: Enumerable<BloodBankOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BloodBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BloodBanks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BloodBanks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BloodBanks
    **/
    _count?: true | BloodBankCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | BloodBankCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BloodBankAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: BloodBankAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BloodBankSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: BloodBankSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BloodBankMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: BloodBankMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BloodBankMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: BloodBankMaxAggregateInputType
  }

  export type GetBloodBankAggregateType<T extends BloodBankAggregateArgs> = {
        [P in keyof T & keyof AggregateBloodBank]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBloodBank[P]>
      : GetScalarType<T[P], AggregateBloodBank[P]>
  }


    
    
  export type BloodBankGroupByArgs = {
    where?: BloodBankWhereInput
    orderBy?: Enumerable<BloodBankOrderByInput>
    by: Array<BloodBankScalarFieldEnum>
    having?: BloodBankScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BloodBankCountAggregateInputType | true
    _avg?: BloodBankAvgAggregateInputType
    _sum?: BloodBankSumAggregateInputType
    _min?: BloodBankMinAggregateInputType
    _max?: BloodBankMaxAggregateInputType
  }


  export type BloodBankGroupByOutputType = {
    ID: number
    Name: string
    Incharge: string
    Address: string
    _count: BloodBankCountAggregateOutputType | null
    _avg: BloodBankAvgAggregateOutputType | null
    _sum: BloodBankSumAggregateOutputType | null
    _min: BloodBankMinAggregateOutputType | null
    _max: BloodBankMaxAggregateOutputType | null
  }

  type GetBloodBankGroupByPayload<T extends BloodBankGroupByArgs> = Promise<
    Array<
      PickArray<BloodBankGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof BloodBankGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], BloodBankGroupByOutputType[P]> 
            : GetScalarType<T[P], BloodBankGroupByOutputType[P]>
        }
      > 
    >


  export type BloodBankSelect = {
    ID?: boolean
    Name?: boolean
    Incharge?: boolean
    Address?: boolean
    Patient?: boolean | PatientFindManyArgs
  }

  export type BloodBankInclude = {
    Patient?: boolean | PatientFindManyArgs
  }

  export type BloodBankGetPayload<
    S extends boolean | null | undefined | BloodBankArgs,
    U = keyof S
      > = S extends true
        ? BloodBank
    : S extends undefined
    ? never
    : S extends BloodBankArgs | BloodBankFindManyArgs
    ?'include' extends U
    ? BloodBank  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Patient'
        ? Array < PatientGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof BloodBank ?BloodBank [P]
  : 
          P extends 'Patient'
        ? Array < PatientGetPayload<S['select'][P]>>  : never
  } 
    : BloodBank
  : BloodBank


  type BloodBankCountArgs = Merge<
    Omit<BloodBankFindManyArgs, 'select' | 'include'> & {
      select?: BloodBankCountAggregateInputType | true
    }
  >

  export interface BloodBankDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one BloodBank that matches the filter.
     * @param {BloodBankFindUniqueArgs} args - Arguments to find a BloodBank
     * @example
     * // Get one BloodBank
     * const bloodBank = await prisma.bloodBank.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BloodBankFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BloodBankFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BloodBank'> extends True ? CheckSelect<T, Prisma__BloodBankClient<BloodBank>, Prisma__BloodBankClient<BloodBankGetPayload<T>>> : CheckSelect<T, Prisma__BloodBankClient<BloodBank | null >, Prisma__BloodBankClient<BloodBankGetPayload<T> | null >>

    /**
     * Find the first BloodBank that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloodBankFindFirstArgs} args - Arguments to find a BloodBank
     * @example
     * // Get one BloodBank
     * const bloodBank = await prisma.bloodBank.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BloodBankFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BloodBankFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BloodBank'> extends True ? CheckSelect<T, Prisma__BloodBankClient<BloodBank>, Prisma__BloodBankClient<BloodBankGetPayload<T>>> : CheckSelect<T, Prisma__BloodBankClient<BloodBank | null >, Prisma__BloodBankClient<BloodBankGetPayload<T> | null >>

    /**
     * Find zero or more BloodBanks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloodBankFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BloodBanks
     * const bloodBanks = await prisma.bloodBank.findMany()
     * 
     * // Get first 10 BloodBanks
     * const bloodBanks = await prisma.bloodBank.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const bloodBankWithIDOnly = await prisma.bloodBank.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends BloodBankFindManyArgs>(
      args?: SelectSubset<T, BloodBankFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<BloodBank>>, PrismaPromise<Array<BloodBankGetPayload<T>>>>

    /**
     * Create a BloodBank.
     * @param {BloodBankCreateArgs} args - Arguments to create a BloodBank.
     * @example
     * // Create one BloodBank
     * const BloodBank = await prisma.bloodBank.create({
     *   data: {
     *     // ... data to create a BloodBank
     *   }
     * })
     * 
    **/
    create<T extends BloodBankCreateArgs>(
      args: SelectSubset<T, BloodBankCreateArgs>
    ): CheckSelect<T, Prisma__BloodBankClient<BloodBank>, Prisma__BloodBankClient<BloodBankGetPayload<T>>>

    /**
     * Create many BloodBanks.
     *     @param {BloodBankCreateManyArgs} args - Arguments to create many BloodBanks.
     *     @example
     *     // Create many BloodBanks
     *     const bloodBank = await prisma.bloodBank.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BloodBankCreateManyArgs>(
      args?: SelectSubset<T, BloodBankCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a BloodBank.
     * @param {BloodBankDeleteArgs} args - Arguments to delete one BloodBank.
     * @example
     * // Delete one BloodBank
     * const BloodBank = await prisma.bloodBank.delete({
     *   where: {
     *     // ... filter to delete one BloodBank
     *   }
     * })
     * 
    **/
    delete<T extends BloodBankDeleteArgs>(
      args: SelectSubset<T, BloodBankDeleteArgs>
    ): CheckSelect<T, Prisma__BloodBankClient<BloodBank>, Prisma__BloodBankClient<BloodBankGetPayload<T>>>

    /**
     * Update one BloodBank.
     * @param {BloodBankUpdateArgs} args - Arguments to update one BloodBank.
     * @example
     * // Update one BloodBank
     * const bloodBank = await prisma.bloodBank.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BloodBankUpdateArgs>(
      args: SelectSubset<T, BloodBankUpdateArgs>
    ): CheckSelect<T, Prisma__BloodBankClient<BloodBank>, Prisma__BloodBankClient<BloodBankGetPayload<T>>>

    /**
     * Delete zero or more BloodBanks.
     * @param {BloodBankDeleteManyArgs} args - Arguments to filter BloodBanks to delete.
     * @example
     * // Delete a few BloodBanks
     * const { count } = await prisma.bloodBank.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BloodBankDeleteManyArgs>(
      args?: SelectSubset<T, BloodBankDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more BloodBanks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloodBankUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BloodBanks
     * const bloodBank = await prisma.bloodBank.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BloodBankUpdateManyArgs>(
      args: SelectSubset<T, BloodBankUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one BloodBank.
     * @param {BloodBankUpsertArgs} args - Arguments to update or create a BloodBank.
     * @example
     * // Update or create a BloodBank
     * const bloodBank = await prisma.bloodBank.upsert({
     *   create: {
     *     // ... data to create a BloodBank
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BloodBank we want to update
     *   }
     * })
    **/
    upsert<T extends BloodBankUpsertArgs>(
      args: SelectSubset<T, BloodBankUpsertArgs>
    ): CheckSelect<T, Prisma__BloodBankClient<BloodBank>, Prisma__BloodBankClient<BloodBankGetPayload<T>>>

    /**
     * Count the number of BloodBanks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloodBankCountArgs} args - Arguments to filter BloodBanks to count.
     * @example
     * // Count the number of BloodBanks
     * const count = await prisma.bloodBank.count({
     *   where: {
     *     // ... the filter for the BloodBanks we want to count
     *   }
     * })
    **/
    count<T extends BloodBankCountArgs>(
      args?: Subset<T, BloodBankCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BloodBankCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BloodBank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloodBankAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BloodBankAggregateArgs>(args: Subset<T, BloodBankAggregateArgs>): PrismaPromise<GetBloodBankAggregateType<T>>

    /**
     * Group by BloodBank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BloodBankGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BloodBankGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BloodBankGroupByArgs['orderBy'] }
        : { orderBy?: BloodBankGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BloodBankGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBloodBankGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for BloodBank.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BloodBankClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Patient<T extends PatientFindManyArgs = {}>(args?: Subset<T, PatientFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Patient>>, PrismaPromise<Array<PatientGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * BloodBank findUnique
   */
  export type BloodBankFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the BloodBank
     * 
    **/
    select?: BloodBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BloodBankInclude | null
    /**
     * Throw an Error if a BloodBank can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which BloodBank to fetch.
     * 
    **/
    where: BloodBankWhereUniqueInput
  }


  /**
   * BloodBank findFirst
   */
  export type BloodBankFindFirstArgs = {
    /**
     * Select specific fields to fetch from the BloodBank
     * 
    **/
    select?: BloodBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BloodBankInclude | null
    /**
     * Throw an Error if a BloodBank can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which BloodBank to fetch.
     * 
    **/
    where?: BloodBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BloodBanks to fetch.
     * 
    **/
    orderBy?: Enumerable<BloodBankOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BloodBanks.
     * 
    **/
    cursor?: BloodBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BloodBanks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BloodBanks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BloodBanks.
     * 
    **/
    distinct?: Enumerable<BloodBankScalarFieldEnum>
  }


  /**
   * BloodBank findMany
   */
  export type BloodBankFindManyArgs = {
    /**
     * Select specific fields to fetch from the BloodBank
     * 
    **/
    select?: BloodBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BloodBankInclude | null
    /**
     * Filter, which BloodBanks to fetch.
     * 
    **/
    where?: BloodBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BloodBanks to fetch.
     * 
    **/
    orderBy?: Enumerable<BloodBankOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BloodBanks.
     * 
    **/
    cursor?: BloodBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BloodBanks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BloodBanks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BloodBankScalarFieldEnum>
  }


  /**
   * BloodBank create
   */
  export type BloodBankCreateArgs = {
    /**
     * Select specific fields to fetch from the BloodBank
     * 
    **/
    select?: BloodBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BloodBankInclude | null
    /**
     * The data needed to create a BloodBank.
     * 
    **/
    data: XOR<BloodBankCreateInput, BloodBankUncheckedCreateInput>
  }


  /**
   * BloodBank createMany
   */
  export type BloodBankCreateManyArgs = {
    data: Enumerable<BloodBankCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BloodBank update
   */
  export type BloodBankUpdateArgs = {
    /**
     * Select specific fields to fetch from the BloodBank
     * 
    **/
    select?: BloodBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BloodBankInclude | null
    /**
     * The data needed to update a BloodBank.
     * 
    **/
    data: XOR<BloodBankUpdateInput, BloodBankUncheckedUpdateInput>
    /**
     * Choose, which BloodBank to update.
     * 
    **/
    where: BloodBankWhereUniqueInput
  }


  /**
   * BloodBank updateMany
   */
  export type BloodBankUpdateManyArgs = {
    data: XOR<BloodBankUpdateManyMutationInput, BloodBankUncheckedUpdateManyInput>
    where?: BloodBankWhereInput
  }


  /**
   * BloodBank upsert
   */
  export type BloodBankUpsertArgs = {
    /**
     * Select specific fields to fetch from the BloodBank
     * 
    **/
    select?: BloodBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BloodBankInclude | null
    /**
     * The filter to search for the BloodBank to update in case it exists.
     * 
    **/
    where: BloodBankWhereUniqueInput
    /**
     * In case the BloodBank found by the `where` argument doesn't exist, create a new BloodBank with this data.
     * 
    **/
    create: XOR<BloodBankCreateInput, BloodBankUncheckedCreateInput>
    /**
     * In case the BloodBank was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BloodBankUpdateInput, BloodBankUncheckedUpdateInput>
  }


  /**
   * BloodBank delete
   */
  export type BloodBankDeleteArgs = {
    /**
     * Select specific fields to fetch from the BloodBank
     * 
    **/
    select?: BloodBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BloodBankInclude | null
    /**
     * Filter which BloodBank to delete.
     * 
    **/
    where: BloodBankWhereUniqueInput
  }


  /**
   * BloodBank deleteMany
   */
  export type BloodBankDeleteManyArgs = {
    where?: BloodBankWhereInput
  }


  /**
   * BloodBank without action
   */
  export type BloodBankArgs = {
    /**
     * Select specific fields to fetch from the BloodBank
     * 
    **/
    select?: BloodBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BloodBankInclude | null
  }



  /**
   * Model OxygenBank
   */


  export type AggregateOxygenBank = {
    _count: OxygenBankCountAggregateOutputType | null
    count: OxygenBankCountAggregateOutputType | null
    _avg: OxygenBankAvgAggregateOutputType | null
    avg: OxygenBankAvgAggregateOutputType | null
    _sum: OxygenBankSumAggregateOutputType | null
    sum: OxygenBankSumAggregateOutputType | null
    _min: OxygenBankMinAggregateOutputType | null
    min: OxygenBankMinAggregateOutputType | null
    _max: OxygenBankMaxAggregateOutputType | null
    max: OxygenBankMaxAggregateOutputType | null
  }

  export type OxygenBankAvgAggregateOutputType = {
    ID: number | null
    Phone: number | null
  }

  export type OxygenBankSumAggregateOutputType = {
    ID: number | null
    Phone: number | null
  }

  export type OxygenBankMinAggregateOutputType = {
    ID: number | null
    Name: string | null
    Phone: number | null
    Address: string | null
  }

  export type OxygenBankMaxAggregateOutputType = {
    ID: number | null
    Name: string | null
    Phone: number | null
    Address: string | null
  }

  export type OxygenBankCountAggregateOutputType = {
    ID: number
    Name: number
    Phone: number
    Address: number
    _all: number
  }


  export type OxygenBankAvgAggregateInputType = {
    ID?: true
    Phone?: true
  }

  export type OxygenBankSumAggregateInputType = {
    ID?: true
    Phone?: true
  }

  export type OxygenBankMinAggregateInputType = {
    ID?: true
    Name?: true
    Phone?: true
    Address?: true
  }

  export type OxygenBankMaxAggregateInputType = {
    ID?: true
    Name?: true
    Phone?: true
    Address?: true
  }

  export type OxygenBankCountAggregateInputType = {
    ID?: true
    Name?: true
    Phone?: true
    Address?: true
    _all?: true
  }

  export type OxygenBankAggregateArgs = {
    /**
     * Filter which OxygenBank to aggregate.
     * 
    **/
    where?: OxygenBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OxygenBanks to fetch.
     * 
    **/
    orderBy?: Enumerable<OxygenBankOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: OxygenBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OxygenBanks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OxygenBanks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OxygenBanks
    **/
    _count?: true | OxygenBankCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | OxygenBankCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OxygenBankAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: OxygenBankAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OxygenBankSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: OxygenBankSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OxygenBankMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: OxygenBankMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OxygenBankMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: OxygenBankMaxAggregateInputType
  }

  export type GetOxygenBankAggregateType<T extends OxygenBankAggregateArgs> = {
        [P in keyof T & keyof AggregateOxygenBank]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOxygenBank[P]>
      : GetScalarType<T[P], AggregateOxygenBank[P]>
  }


    
    
  export type OxygenBankGroupByArgs = {
    where?: OxygenBankWhereInput
    orderBy?: Enumerable<OxygenBankOrderByInput>
    by: Array<OxygenBankScalarFieldEnum>
    having?: OxygenBankScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OxygenBankCountAggregateInputType | true
    _avg?: OxygenBankAvgAggregateInputType
    _sum?: OxygenBankSumAggregateInputType
    _min?: OxygenBankMinAggregateInputType
    _max?: OxygenBankMaxAggregateInputType
  }


  export type OxygenBankGroupByOutputType = {
    ID: number
    Name: string
    Phone: number
    Address: string
    _count: OxygenBankCountAggregateOutputType | null
    _avg: OxygenBankAvgAggregateOutputType | null
    _sum: OxygenBankSumAggregateOutputType | null
    _min: OxygenBankMinAggregateOutputType | null
    _max: OxygenBankMaxAggregateOutputType | null
  }

  type GetOxygenBankGroupByPayload<T extends OxygenBankGroupByArgs> = Promise<
    Array<
      PickArray<OxygenBankGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof OxygenBankGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], OxygenBankGroupByOutputType[P]> 
            : GetScalarType<T[P], OxygenBankGroupByOutputType[P]>
        }
      > 
    >


  export type OxygenBankSelect = {
    ID?: boolean
    Name?: boolean
    Phone?: boolean
    Address?: boolean
    Patient?: boolean | PatientFindManyArgs
  }

  export type OxygenBankInclude = {
    Patient?: boolean | PatientFindManyArgs
  }

  export type OxygenBankGetPayload<
    S extends boolean | null | undefined | OxygenBankArgs,
    U = keyof S
      > = S extends true
        ? OxygenBank
    : S extends undefined
    ? never
    : S extends OxygenBankArgs | OxygenBankFindManyArgs
    ?'include' extends U
    ? OxygenBank  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Patient'
        ? Array < PatientGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof OxygenBank ?OxygenBank [P]
  : 
          P extends 'Patient'
        ? Array < PatientGetPayload<S['select'][P]>>  : never
  } 
    : OxygenBank
  : OxygenBank


  type OxygenBankCountArgs = Merge<
    Omit<OxygenBankFindManyArgs, 'select' | 'include'> & {
      select?: OxygenBankCountAggregateInputType | true
    }
  >

  export interface OxygenBankDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one OxygenBank that matches the filter.
     * @param {OxygenBankFindUniqueArgs} args - Arguments to find a OxygenBank
     * @example
     * // Get one OxygenBank
     * const oxygenBank = await prisma.oxygenBank.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OxygenBankFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OxygenBankFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'OxygenBank'> extends True ? CheckSelect<T, Prisma__OxygenBankClient<OxygenBank>, Prisma__OxygenBankClient<OxygenBankGetPayload<T>>> : CheckSelect<T, Prisma__OxygenBankClient<OxygenBank | null >, Prisma__OxygenBankClient<OxygenBankGetPayload<T> | null >>

    /**
     * Find the first OxygenBank that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OxygenBankFindFirstArgs} args - Arguments to find a OxygenBank
     * @example
     * // Get one OxygenBank
     * const oxygenBank = await prisma.oxygenBank.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OxygenBankFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OxygenBankFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'OxygenBank'> extends True ? CheckSelect<T, Prisma__OxygenBankClient<OxygenBank>, Prisma__OxygenBankClient<OxygenBankGetPayload<T>>> : CheckSelect<T, Prisma__OxygenBankClient<OxygenBank | null >, Prisma__OxygenBankClient<OxygenBankGetPayload<T> | null >>

    /**
     * Find zero or more OxygenBanks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OxygenBankFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OxygenBanks
     * const oxygenBanks = await prisma.oxygenBank.findMany()
     * 
     * // Get first 10 OxygenBanks
     * const oxygenBanks = await prisma.oxygenBank.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const oxygenBankWithIDOnly = await prisma.oxygenBank.findMany({ select: { ID: true } })
     * 
    **/
    findMany<T extends OxygenBankFindManyArgs>(
      args?: SelectSubset<T, OxygenBankFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<OxygenBank>>, PrismaPromise<Array<OxygenBankGetPayload<T>>>>

    /**
     * Create a OxygenBank.
     * @param {OxygenBankCreateArgs} args - Arguments to create a OxygenBank.
     * @example
     * // Create one OxygenBank
     * const OxygenBank = await prisma.oxygenBank.create({
     *   data: {
     *     // ... data to create a OxygenBank
     *   }
     * })
     * 
    **/
    create<T extends OxygenBankCreateArgs>(
      args: SelectSubset<T, OxygenBankCreateArgs>
    ): CheckSelect<T, Prisma__OxygenBankClient<OxygenBank>, Prisma__OxygenBankClient<OxygenBankGetPayload<T>>>

    /**
     * Create many OxygenBanks.
     *     @param {OxygenBankCreateManyArgs} args - Arguments to create many OxygenBanks.
     *     @example
     *     // Create many OxygenBanks
     *     const oxygenBank = await prisma.oxygenBank.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OxygenBankCreateManyArgs>(
      args?: SelectSubset<T, OxygenBankCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a OxygenBank.
     * @param {OxygenBankDeleteArgs} args - Arguments to delete one OxygenBank.
     * @example
     * // Delete one OxygenBank
     * const OxygenBank = await prisma.oxygenBank.delete({
     *   where: {
     *     // ... filter to delete one OxygenBank
     *   }
     * })
     * 
    **/
    delete<T extends OxygenBankDeleteArgs>(
      args: SelectSubset<T, OxygenBankDeleteArgs>
    ): CheckSelect<T, Prisma__OxygenBankClient<OxygenBank>, Prisma__OxygenBankClient<OxygenBankGetPayload<T>>>

    /**
     * Update one OxygenBank.
     * @param {OxygenBankUpdateArgs} args - Arguments to update one OxygenBank.
     * @example
     * // Update one OxygenBank
     * const oxygenBank = await prisma.oxygenBank.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OxygenBankUpdateArgs>(
      args: SelectSubset<T, OxygenBankUpdateArgs>
    ): CheckSelect<T, Prisma__OxygenBankClient<OxygenBank>, Prisma__OxygenBankClient<OxygenBankGetPayload<T>>>

    /**
     * Delete zero or more OxygenBanks.
     * @param {OxygenBankDeleteManyArgs} args - Arguments to filter OxygenBanks to delete.
     * @example
     * // Delete a few OxygenBanks
     * const { count } = await prisma.oxygenBank.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OxygenBankDeleteManyArgs>(
      args?: SelectSubset<T, OxygenBankDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more OxygenBanks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OxygenBankUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OxygenBanks
     * const oxygenBank = await prisma.oxygenBank.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OxygenBankUpdateManyArgs>(
      args: SelectSubset<T, OxygenBankUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one OxygenBank.
     * @param {OxygenBankUpsertArgs} args - Arguments to update or create a OxygenBank.
     * @example
     * // Update or create a OxygenBank
     * const oxygenBank = await prisma.oxygenBank.upsert({
     *   create: {
     *     // ... data to create a OxygenBank
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OxygenBank we want to update
     *   }
     * })
    **/
    upsert<T extends OxygenBankUpsertArgs>(
      args: SelectSubset<T, OxygenBankUpsertArgs>
    ): CheckSelect<T, Prisma__OxygenBankClient<OxygenBank>, Prisma__OxygenBankClient<OxygenBankGetPayload<T>>>

    /**
     * Count the number of OxygenBanks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OxygenBankCountArgs} args - Arguments to filter OxygenBanks to count.
     * @example
     * // Count the number of OxygenBanks
     * const count = await prisma.oxygenBank.count({
     *   where: {
     *     // ... the filter for the OxygenBanks we want to count
     *   }
     * })
    **/
    count<T extends OxygenBankCountArgs>(
      args?: Subset<T, OxygenBankCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OxygenBankCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OxygenBank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OxygenBankAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OxygenBankAggregateArgs>(args: Subset<T, OxygenBankAggregateArgs>): PrismaPromise<GetOxygenBankAggregateType<T>>

    /**
     * Group by OxygenBank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OxygenBankGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OxygenBankGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OxygenBankGroupByArgs['orderBy'] }
        : { orderBy?: OxygenBankGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OxygenBankGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOxygenBankGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for OxygenBank.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OxygenBankClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Patient<T extends PatientFindManyArgs = {}>(args?: Subset<T, PatientFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Patient>>, PrismaPromise<Array<PatientGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * OxygenBank findUnique
   */
  export type OxygenBankFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the OxygenBank
     * 
    **/
    select?: OxygenBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OxygenBankInclude | null
    /**
     * Throw an Error if a OxygenBank can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which OxygenBank to fetch.
     * 
    **/
    where: OxygenBankWhereUniqueInput
  }


  /**
   * OxygenBank findFirst
   */
  export type OxygenBankFindFirstArgs = {
    /**
     * Select specific fields to fetch from the OxygenBank
     * 
    **/
    select?: OxygenBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OxygenBankInclude | null
    /**
     * Throw an Error if a OxygenBank can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which OxygenBank to fetch.
     * 
    **/
    where?: OxygenBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OxygenBanks to fetch.
     * 
    **/
    orderBy?: Enumerable<OxygenBankOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OxygenBanks.
     * 
    **/
    cursor?: OxygenBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OxygenBanks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OxygenBanks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OxygenBanks.
     * 
    **/
    distinct?: Enumerable<OxygenBankScalarFieldEnum>
  }


  /**
   * OxygenBank findMany
   */
  export type OxygenBankFindManyArgs = {
    /**
     * Select specific fields to fetch from the OxygenBank
     * 
    **/
    select?: OxygenBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OxygenBankInclude | null
    /**
     * Filter, which OxygenBanks to fetch.
     * 
    **/
    where?: OxygenBankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OxygenBanks to fetch.
     * 
    **/
    orderBy?: Enumerable<OxygenBankOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OxygenBanks.
     * 
    **/
    cursor?: OxygenBankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OxygenBanks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OxygenBanks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OxygenBankScalarFieldEnum>
  }


  /**
   * OxygenBank create
   */
  export type OxygenBankCreateArgs = {
    /**
     * Select specific fields to fetch from the OxygenBank
     * 
    **/
    select?: OxygenBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OxygenBankInclude | null
    /**
     * The data needed to create a OxygenBank.
     * 
    **/
    data: XOR<OxygenBankCreateInput, OxygenBankUncheckedCreateInput>
  }


  /**
   * OxygenBank createMany
   */
  export type OxygenBankCreateManyArgs = {
    data: Enumerable<OxygenBankCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * OxygenBank update
   */
  export type OxygenBankUpdateArgs = {
    /**
     * Select specific fields to fetch from the OxygenBank
     * 
    **/
    select?: OxygenBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OxygenBankInclude | null
    /**
     * The data needed to update a OxygenBank.
     * 
    **/
    data: XOR<OxygenBankUpdateInput, OxygenBankUncheckedUpdateInput>
    /**
     * Choose, which OxygenBank to update.
     * 
    **/
    where: OxygenBankWhereUniqueInput
  }


  /**
   * OxygenBank updateMany
   */
  export type OxygenBankUpdateManyArgs = {
    data: XOR<OxygenBankUpdateManyMutationInput, OxygenBankUncheckedUpdateManyInput>
    where?: OxygenBankWhereInput
  }


  /**
   * OxygenBank upsert
   */
  export type OxygenBankUpsertArgs = {
    /**
     * Select specific fields to fetch from the OxygenBank
     * 
    **/
    select?: OxygenBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OxygenBankInclude | null
    /**
     * The filter to search for the OxygenBank to update in case it exists.
     * 
    **/
    where: OxygenBankWhereUniqueInput
    /**
     * In case the OxygenBank found by the `where` argument doesn't exist, create a new OxygenBank with this data.
     * 
    **/
    create: XOR<OxygenBankCreateInput, OxygenBankUncheckedCreateInput>
    /**
     * In case the OxygenBank was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<OxygenBankUpdateInput, OxygenBankUncheckedUpdateInput>
  }


  /**
   * OxygenBank delete
   */
  export type OxygenBankDeleteArgs = {
    /**
     * Select specific fields to fetch from the OxygenBank
     * 
    **/
    select?: OxygenBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OxygenBankInclude | null
    /**
     * Filter which OxygenBank to delete.
     * 
    **/
    where: OxygenBankWhereUniqueInput
  }


  /**
   * OxygenBank deleteMany
   */
  export type OxygenBankDeleteManyArgs = {
    where?: OxygenBankWhereInput
  }


  /**
   * OxygenBank without action
   */
  export type OxygenBankArgs = {
    /**
     * Select specific fields to fetch from the OxygenBank
     * 
    **/
    select?: OxygenBankSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OxygenBankInclude | null
  }



  /**
   * Model AmbulanceService
   */


  export type AggregateAmbulanceService = {
    _count: AmbulanceServiceCountAggregateOutputType | null
    count: AmbulanceServiceCountAggregateOutputType | null
    _avg: AmbulanceServiceAvgAggregateOutputType | null
    avg: AmbulanceServiceAvgAggregateOutputType | null
    _sum: AmbulanceServiceSumAggregateOutputType | null
    sum: AmbulanceServiceSumAggregateOutputType | null
    _min: AmbulanceServiceMinAggregateOutputType | null
    min: AmbulanceServiceMinAggregateOutputType | null
    _max: AmbulanceServiceMaxAggregateOutputType | null
    max: AmbulanceServiceMaxAggregateOutputType | null
  }

  export type AmbulanceServiceAvgAggregateOutputType = {
    Id: number | null
    Phone: number | null
  }

  export type AmbulanceServiceSumAggregateOutputType = {
    Id: number | null
    Phone: number | null
  }

  export type AmbulanceServiceMinAggregateOutputType = {
    Id: number | null
    Name: string | null
    Phone: number | null
    Address: string | null
  }

  export type AmbulanceServiceMaxAggregateOutputType = {
    Id: number | null
    Name: string | null
    Phone: number | null
    Address: string | null
  }

  export type AmbulanceServiceCountAggregateOutputType = {
    Id: number
    Name: number
    Phone: number
    Address: number
    _all: number
  }


  export type AmbulanceServiceAvgAggregateInputType = {
    Id?: true
    Phone?: true
  }

  export type AmbulanceServiceSumAggregateInputType = {
    Id?: true
    Phone?: true
  }

  export type AmbulanceServiceMinAggregateInputType = {
    Id?: true
    Name?: true
    Phone?: true
    Address?: true
  }

  export type AmbulanceServiceMaxAggregateInputType = {
    Id?: true
    Name?: true
    Phone?: true
    Address?: true
  }

  export type AmbulanceServiceCountAggregateInputType = {
    Id?: true
    Name?: true
    Phone?: true
    Address?: true
    _all?: true
  }

  export type AmbulanceServiceAggregateArgs = {
    /**
     * Filter which AmbulanceService to aggregate.
     * 
    **/
    where?: AmbulanceServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AmbulanceServices to fetch.
     * 
    **/
    orderBy?: Enumerable<AmbulanceServiceOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AmbulanceServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AmbulanceServices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AmbulanceServices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AmbulanceServices
    **/
    _count?: true | AmbulanceServiceCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | AmbulanceServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AmbulanceServiceAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: AmbulanceServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AmbulanceServiceSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: AmbulanceServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AmbulanceServiceMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: AmbulanceServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AmbulanceServiceMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: AmbulanceServiceMaxAggregateInputType
  }

  export type GetAmbulanceServiceAggregateType<T extends AmbulanceServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateAmbulanceService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAmbulanceService[P]>
      : GetScalarType<T[P], AggregateAmbulanceService[P]>
  }


    
    
  export type AmbulanceServiceGroupByArgs = {
    where?: AmbulanceServiceWhereInput
    orderBy?: Enumerable<AmbulanceServiceOrderByInput>
    by: Array<AmbulanceServiceScalarFieldEnum>
    having?: AmbulanceServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AmbulanceServiceCountAggregateInputType | true
    _avg?: AmbulanceServiceAvgAggregateInputType
    _sum?: AmbulanceServiceSumAggregateInputType
    _min?: AmbulanceServiceMinAggregateInputType
    _max?: AmbulanceServiceMaxAggregateInputType
  }


  export type AmbulanceServiceGroupByOutputType = {
    Id: number
    Name: string
    Phone: number
    Address: string
    _count: AmbulanceServiceCountAggregateOutputType | null
    _avg: AmbulanceServiceAvgAggregateOutputType | null
    _sum: AmbulanceServiceSumAggregateOutputType | null
    _min: AmbulanceServiceMinAggregateOutputType | null
    _max: AmbulanceServiceMaxAggregateOutputType | null
  }

  type GetAmbulanceServiceGroupByPayload<T extends AmbulanceServiceGroupByArgs> = Promise<
    Array<
      PickArray<AmbulanceServiceGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof AmbulanceServiceGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], AmbulanceServiceGroupByOutputType[P]> 
            : GetScalarType<T[P], AmbulanceServiceGroupByOutputType[P]>
        }
      > 
    >


  export type AmbulanceServiceSelect = {
    Id?: boolean
    Name?: boolean
    Phone?: boolean
    Address?: boolean
    Patient?: boolean | PatientFindManyArgs
  }

  export type AmbulanceServiceInclude = {
    Patient?: boolean | PatientFindManyArgs
  }

  export type AmbulanceServiceGetPayload<
    S extends boolean | null | undefined | AmbulanceServiceArgs,
    U = keyof S
      > = S extends true
        ? AmbulanceService
    : S extends undefined
    ? never
    : S extends AmbulanceServiceArgs | AmbulanceServiceFindManyArgs
    ?'include' extends U
    ? AmbulanceService  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Patient'
        ? Array < PatientGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof AmbulanceService ?AmbulanceService [P]
  : 
          P extends 'Patient'
        ? Array < PatientGetPayload<S['select'][P]>>  : never
  } 
    : AmbulanceService
  : AmbulanceService


  type AmbulanceServiceCountArgs = Merge<
    Omit<AmbulanceServiceFindManyArgs, 'select' | 'include'> & {
      select?: AmbulanceServiceCountAggregateInputType | true
    }
  >

  export interface AmbulanceServiceDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one AmbulanceService that matches the filter.
     * @param {AmbulanceServiceFindUniqueArgs} args - Arguments to find a AmbulanceService
     * @example
     * // Get one AmbulanceService
     * const ambulanceService = await prisma.ambulanceService.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AmbulanceServiceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AmbulanceServiceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'AmbulanceService'> extends True ? CheckSelect<T, Prisma__AmbulanceServiceClient<AmbulanceService>, Prisma__AmbulanceServiceClient<AmbulanceServiceGetPayload<T>>> : CheckSelect<T, Prisma__AmbulanceServiceClient<AmbulanceService | null >, Prisma__AmbulanceServiceClient<AmbulanceServiceGetPayload<T> | null >>

    /**
     * Find the first AmbulanceService that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceServiceFindFirstArgs} args - Arguments to find a AmbulanceService
     * @example
     * // Get one AmbulanceService
     * const ambulanceService = await prisma.ambulanceService.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AmbulanceServiceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AmbulanceServiceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'AmbulanceService'> extends True ? CheckSelect<T, Prisma__AmbulanceServiceClient<AmbulanceService>, Prisma__AmbulanceServiceClient<AmbulanceServiceGetPayload<T>>> : CheckSelect<T, Prisma__AmbulanceServiceClient<AmbulanceService | null >, Prisma__AmbulanceServiceClient<AmbulanceServiceGetPayload<T> | null >>

    /**
     * Find zero or more AmbulanceServices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceServiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AmbulanceServices
     * const ambulanceServices = await prisma.ambulanceService.findMany()
     * 
     * // Get first 10 AmbulanceServices
     * const ambulanceServices = await prisma.ambulanceService.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const ambulanceServiceWithIdOnly = await prisma.ambulanceService.findMany({ select: { Id: true } })
     * 
    **/
    findMany<T extends AmbulanceServiceFindManyArgs>(
      args?: SelectSubset<T, AmbulanceServiceFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<AmbulanceService>>, PrismaPromise<Array<AmbulanceServiceGetPayload<T>>>>

    /**
     * Create a AmbulanceService.
     * @param {AmbulanceServiceCreateArgs} args - Arguments to create a AmbulanceService.
     * @example
     * // Create one AmbulanceService
     * const AmbulanceService = await prisma.ambulanceService.create({
     *   data: {
     *     // ... data to create a AmbulanceService
     *   }
     * })
     * 
    **/
    create<T extends AmbulanceServiceCreateArgs>(
      args: SelectSubset<T, AmbulanceServiceCreateArgs>
    ): CheckSelect<T, Prisma__AmbulanceServiceClient<AmbulanceService>, Prisma__AmbulanceServiceClient<AmbulanceServiceGetPayload<T>>>

    /**
     * Create many AmbulanceServices.
     *     @param {AmbulanceServiceCreateManyArgs} args - Arguments to create many AmbulanceServices.
     *     @example
     *     // Create many AmbulanceServices
     *     const ambulanceService = await prisma.ambulanceService.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AmbulanceServiceCreateManyArgs>(
      args?: SelectSubset<T, AmbulanceServiceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a AmbulanceService.
     * @param {AmbulanceServiceDeleteArgs} args - Arguments to delete one AmbulanceService.
     * @example
     * // Delete one AmbulanceService
     * const AmbulanceService = await prisma.ambulanceService.delete({
     *   where: {
     *     // ... filter to delete one AmbulanceService
     *   }
     * })
     * 
    **/
    delete<T extends AmbulanceServiceDeleteArgs>(
      args: SelectSubset<T, AmbulanceServiceDeleteArgs>
    ): CheckSelect<T, Prisma__AmbulanceServiceClient<AmbulanceService>, Prisma__AmbulanceServiceClient<AmbulanceServiceGetPayload<T>>>

    /**
     * Update one AmbulanceService.
     * @param {AmbulanceServiceUpdateArgs} args - Arguments to update one AmbulanceService.
     * @example
     * // Update one AmbulanceService
     * const ambulanceService = await prisma.ambulanceService.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AmbulanceServiceUpdateArgs>(
      args: SelectSubset<T, AmbulanceServiceUpdateArgs>
    ): CheckSelect<T, Prisma__AmbulanceServiceClient<AmbulanceService>, Prisma__AmbulanceServiceClient<AmbulanceServiceGetPayload<T>>>

    /**
     * Delete zero or more AmbulanceServices.
     * @param {AmbulanceServiceDeleteManyArgs} args - Arguments to filter AmbulanceServices to delete.
     * @example
     * // Delete a few AmbulanceServices
     * const { count } = await prisma.ambulanceService.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AmbulanceServiceDeleteManyArgs>(
      args?: SelectSubset<T, AmbulanceServiceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more AmbulanceServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AmbulanceServices
     * const ambulanceService = await prisma.ambulanceService.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AmbulanceServiceUpdateManyArgs>(
      args: SelectSubset<T, AmbulanceServiceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one AmbulanceService.
     * @param {AmbulanceServiceUpsertArgs} args - Arguments to update or create a AmbulanceService.
     * @example
     * // Update or create a AmbulanceService
     * const ambulanceService = await prisma.ambulanceService.upsert({
     *   create: {
     *     // ... data to create a AmbulanceService
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AmbulanceService we want to update
     *   }
     * })
    **/
    upsert<T extends AmbulanceServiceUpsertArgs>(
      args: SelectSubset<T, AmbulanceServiceUpsertArgs>
    ): CheckSelect<T, Prisma__AmbulanceServiceClient<AmbulanceService>, Prisma__AmbulanceServiceClient<AmbulanceServiceGetPayload<T>>>

    /**
     * Count the number of AmbulanceServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceServiceCountArgs} args - Arguments to filter AmbulanceServices to count.
     * @example
     * // Count the number of AmbulanceServices
     * const count = await prisma.ambulanceService.count({
     *   where: {
     *     // ... the filter for the AmbulanceServices we want to count
     *   }
     * })
    **/
    count<T extends AmbulanceServiceCountArgs>(
      args?: Subset<T, AmbulanceServiceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AmbulanceServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AmbulanceService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AmbulanceServiceAggregateArgs>(args: Subset<T, AmbulanceServiceAggregateArgs>): PrismaPromise<GetAmbulanceServiceAggregateType<T>>

    /**
     * Group by AmbulanceService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AmbulanceServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AmbulanceServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AmbulanceServiceGroupByArgs['orderBy'] }
        : { orderBy?: AmbulanceServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AmbulanceServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAmbulanceServiceGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for AmbulanceService.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AmbulanceServiceClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Patient<T extends PatientFindManyArgs = {}>(args?: Subset<T, PatientFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Patient>>, PrismaPromise<Array<PatientGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * AmbulanceService findUnique
   */
  export type AmbulanceServiceFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the AmbulanceService
     * 
    **/
    select?: AmbulanceServiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AmbulanceServiceInclude | null
    /**
     * Throw an Error if a AmbulanceService can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which AmbulanceService to fetch.
     * 
    **/
    where: AmbulanceServiceWhereUniqueInput
  }


  /**
   * AmbulanceService findFirst
   */
  export type AmbulanceServiceFindFirstArgs = {
    /**
     * Select specific fields to fetch from the AmbulanceService
     * 
    **/
    select?: AmbulanceServiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AmbulanceServiceInclude | null
    /**
     * Throw an Error if a AmbulanceService can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which AmbulanceService to fetch.
     * 
    **/
    where?: AmbulanceServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AmbulanceServices to fetch.
     * 
    **/
    orderBy?: Enumerable<AmbulanceServiceOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AmbulanceServices.
     * 
    **/
    cursor?: AmbulanceServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AmbulanceServices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AmbulanceServices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AmbulanceServices.
     * 
    **/
    distinct?: Enumerable<AmbulanceServiceScalarFieldEnum>
  }


  /**
   * AmbulanceService findMany
   */
  export type AmbulanceServiceFindManyArgs = {
    /**
     * Select specific fields to fetch from the AmbulanceService
     * 
    **/
    select?: AmbulanceServiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AmbulanceServiceInclude | null
    /**
     * Filter, which AmbulanceServices to fetch.
     * 
    **/
    where?: AmbulanceServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AmbulanceServices to fetch.
     * 
    **/
    orderBy?: Enumerable<AmbulanceServiceOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AmbulanceServices.
     * 
    **/
    cursor?: AmbulanceServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AmbulanceServices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AmbulanceServices.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AmbulanceServiceScalarFieldEnum>
  }


  /**
   * AmbulanceService create
   */
  export type AmbulanceServiceCreateArgs = {
    /**
     * Select specific fields to fetch from the AmbulanceService
     * 
    **/
    select?: AmbulanceServiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AmbulanceServiceInclude | null
    /**
     * The data needed to create a AmbulanceService.
     * 
    **/
    data: XOR<AmbulanceServiceCreateInput, AmbulanceServiceUncheckedCreateInput>
  }


  /**
   * AmbulanceService createMany
   */
  export type AmbulanceServiceCreateManyArgs = {
    data: Enumerable<AmbulanceServiceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * AmbulanceService update
   */
  export type AmbulanceServiceUpdateArgs = {
    /**
     * Select specific fields to fetch from the AmbulanceService
     * 
    **/
    select?: AmbulanceServiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AmbulanceServiceInclude | null
    /**
     * The data needed to update a AmbulanceService.
     * 
    **/
    data: XOR<AmbulanceServiceUpdateInput, AmbulanceServiceUncheckedUpdateInput>
    /**
     * Choose, which AmbulanceService to update.
     * 
    **/
    where: AmbulanceServiceWhereUniqueInput
  }


  /**
   * AmbulanceService updateMany
   */
  export type AmbulanceServiceUpdateManyArgs = {
    data: XOR<AmbulanceServiceUpdateManyMutationInput, AmbulanceServiceUncheckedUpdateManyInput>
    where?: AmbulanceServiceWhereInput
  }


  /**
   * AmbulanceService upsert
   */
  export type AmbulanceServiceUpsertArgs = {
    /**
     * Select specific fields to fetch from the AmbulanceService
     * 
    **/
    select?: AmbulanceServiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AmbulanceServiceInclude | null
    /**
     * The filter to search for the AmbulanceService to update in case it exists.
     * 
    **/
    where: AmbulanceServiceWhereUniqueInput
    /**
     * In case the AmbulanceService found by the `where` argument doesn't exist, create a new AmbulanceService with this data.
     * 
    **/
    create: XOR<AmbulanceServiceCreateInput, AmbulanceServiceUncheckedCreateInput>
    /**
     * In case the AmbulanceService was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AmbulanceServiceUpdateInput, AmbulanceServiceUncheckedUpdateInput>
  }


  /**
   * AmbulanceService delete
   */
  export type AmbulanceServiceDeleteArgs = {
    /**
     * Select specific fields to fetch from the AmbulanceService
     * 
    **/
    select?: AmbulanceServiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AmbulanceServiceInclude | null
    /**
     * Filter which AmbulanceService to delete.
     * 
    **/
    where: AmbulanceServiceWhereUniqueInput
  }


  /**
   * AmbulanceService deleteMany
   */
  export type AmbulanceServiceDeleteManyArgs = {
    where?: AmbulanceServiceWhereInput
  }


  /**
   * AmbulanceService without action
   */
  export type AmbulanceServiceArgs = {
    /**
     * Select specific fields to fetch from the AmbulanceService
     * 
    **/
    select?: AmbulanceServiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AmbulanceServiceInclude | null
  }



  /**
   * Model MedicalShop
   */


  export type AggregateMedicalShop = {
    _count: MedicalShopCountAggregateOutputType | null
    count: MedicalShopCountAggregateOutputType | null
    _avg: MedicalShopAvgAggregateOutputType | null
    avg: MedicalShopAvgAggregateOutputType | null
    _sum: MedicalShopSumAggregateOutputType | null
    sum: MedicalShopSumAggregateOutputType | null
    _min: MedicalShopMinAggregateOutputType | null
    min: MedicalShopMinAggregateOutputType | null
    _max: MedicalShopMaxAggregateOutputType | null
    max: MedicalShopMaxAggregateOutputType | null
  }

  export type MedicalShopAvgAggregateOutputType = {
    Id: number | null
    Phone: number | null
  }

  export type MedicalShopSumAggregateOutputType = {
    Id: number | null
    Phone: number | null
  }

  export type MedicalShopMinAggregateOutputType = {
    Id: number | null
    Name: string | null
    Phone: number | null
    Address: string | null
  }

  export type MedicalShopMaxAggregateOutputType = {
    Id: number | null
    Name: string | null
    Phone: number | null
    Address: string | null
  }

  export type MedicalShopCountAggregateOutputType = {
    Id: number
    Name: number
    Phone: number
    Address: number
    _all: number
  }


  export type MedicalShopAvgAggregateInputType = {
    Id?: true
    Phone?: true
  }

  export type MedicalShopSumAggregateInputType = {
    Id?: true
    Phone?: true
  }

  export type MedicalShopMinAggregateInputType = {
    Id?: true
    Name?: true
    Phone?: true
    Address?: true
  }

  export type MedicalShopMaxAggregateInputType = {
    Id?: true
    Name?: true
    Phone?: true
    Address?: true
  }

  export type MedicalShopCountAggregateInputType = {
    Id?: true
    Name?: true
    Phone?: true
    Address?: true
    _all?: true
  }

  export type MedicalShopAggregateArgs = {
    /**
     * Filter which MedicalShop to aggregate.
     * 
    **/
    where?: MedicalShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalShops to fetch.
     * 
    **/
    orderBy?: Enumerable<MedicalShopOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: MedicalShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalShops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalShops.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MedicalShops
    **/
    _count?: true | MedicalShopCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | MedicalShopCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicalShopAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: MedicalShopAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicalShopSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: MedicalShopSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicalShopMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: MedicalShopMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicalShopMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: MedicalShopMaxAggregateInputType
  }

  export type GetMedicalShopAggregateType<T extends MedicalShopAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicalShop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicalShop[P]>
      : GetScalarType<T[P], AggregateMedicalShop[P]>
  }


    
    
  export type MedicalShopGroupByArgs = {
    where?: MedicalShopWhereInput
    orderBy?: Enumerable<MedicalShopOrderByInput>
    by: Array<MedicalShopScalarFieldEnum>
    having?: MedicalShopScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicalShopCountAggregateInputType | true
    _avg?: MedicalShopAvgAggregateInputType
    _sum?: MedicalShopSumAggregateInputType
    _min?: MedicalShopMinAggregateInputType
    _max?: MedicalShopMaxAggregateInputType
  }


  export type MedicalShopGroupByOutputType = {
    Id: number
    Name: string
    Phone: number
    Address: string
    _count: MedicalShopCountAggregateOutputType | null
    _avg: MedicalShopAvgAggregateOutputType | null
    _sum: MedicalShopSumAggregateOutputType | null
    _min: MedicalShopMinAggregateOutputType | null
    _max: MedicalShopMaxAggregateOutputType | null
  }

  type GetMedicalShopGroupByPayload<T extends MedicalShopGroupByArgs> = Promise<
    Array<
      PickArray<MedicalShopGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof MedicalShopGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], MedicalShopGroupByOutputType[P]> 
            : GetScalarType<T[P], MedicalShopGroupByOutputType[P]>
        }
      > 
    >


  export type MedicalShopSelect = {
    Id?: boolean
    Name?: boolean
    Phone?: boolean
    Address?: boolean
  }

  export type MedicalShopGetPayload<
    S extends boolean | null | undefined | MedicalShopArgs,
    U = keyof S
      > = S extends true
        ? MedicalShop
    : S extends undefined
    ? never
    : S extends MedicalShopArgs | MedicalShopFindManyArgs
    ?'include' extends U
    ? MedicalShop 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof MedicalShop ?MedicalShop [P]
  : 
     never
  } 
    : MedicalShop
  : MedicalShop


  type MedicalShopCountArgs = Merge<
    Omit<MedicalShopFindManyArgs, 'select' | 'include'> & {
      select?: MedicalShopCountAggregateInputType | true
    }
  >

  export interface MedicalShopDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one MedicalShop that matches the filter.
     * @param {MedicalShopFindUniqueArgs} args - Arguments to find a MedicalShop
     * @example
     * // Get one MedicalShop
     * const medicalShop = await prisma.medicalShop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MedicalShopFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MedicalShopFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MedicalShop'> extends True ? CheckSelect<T, Prisma__MedicalShopClient<MedicalShop>, Prisma__MedicalShopClient<MedicalShopGetPayload<T>>> : CheckSelect<T, Prisma__MedicalShopClient<MedicalShop | null >, Prisma__MedicalShopClient<MedicalShopGetPayload<T> | null >>

    /**
     * Find the first MedicalShop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalShopFindFirstArgs} args - Arguments to find a MedicalShop
     * @example
     * // Get one MedicalShop
     * const medicalShop = await prisma.medicalShop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MedicalShopFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MedicalShopFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MedicalShop'> extends True ? CheckSelect<T, Prisma__MedicalShopClient<MedicalShop>, Prisma__MedicalShopClient<MedicalShopGetPayload<T>>> : CheckSelect<T, Prisma__MedicalShopClient<MedicalShop | null >, Prisma__MedicalShopClient<MedicalShopGetPayload<T> | null >>

    /**
     * Find zero or more MedicalShops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalShopFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MedicalShops
     * const medicalShops = await prisma.medicalShop.findMany()
     * 
     * // Get first 10 MedicalShops
     * const medicalShops = await prisma.medicalShop.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const medicalShopWithIdOnly = await prisma.medicalShop.findMany({ select: { Id: true } })
     * 
    **/
    findMany<T extends MedicalShopFindManyArgs>(
      args?: SelectSubset<T, MedicalShopFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<MedicalShop>>, PrismaPromise<Array<MedicalShopGetPayload<T>>>>

    /**
     * Create a MedicalShop.
     * @param {MedicalShopCreateArgs} args - Arguments to create a MedicalShop.
     * @example
     * // Create one MedicalShop
     * const MedicalShop = await prisma.medicalShop.create({
     *   data: {
     *     // ... data to create a MedicalShop
     *   }
     * })
     * 
    **/
    create<T extends MedicalShopCreateArgs>(
      args: SelectSubset<T, MedicalShopCreateArgs>
    ): CheckSelect<T, Prisma__MedicalShopClient<MedicalShop>, Prisma__MedicalShopClient<MedicalShopGetPayload<T>>>

    /**
     * Create many MedicalShops.
     *     @param {MedicalShopCreateManyArgs} args - Arguments to create many MedicalShops.
     *     @example
     *     // Create many MedicalShops
     *     const medicalShop = await prisma.medicalShop.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MedicalShopCreateManyArgs>(
      args?: SelectSubset<T, MedicalShopCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a MedicalShop.
     * @param {MedicalShopDeleteArgs} args - Arguments to delete one MedicalShop.
     * @example
     * // Delete one MedicalShop
     * const MedicalShop = await prisma.medicalShop.delete({
     *   where: {
     *     // ... filter to delete one MedicalShop
     *   }
     * })
     * 
    **/
    delete<T extends MedicalShopDeleteArgs>(
      args: SelectSubset<T, MedicalShopDeleteArgs>
    ): CheckSelect<T, Prisma__MedicalShopClient<MedicalShop>, Prisma__MedicalShopClient<MedicalShopGetPayload<T>>>

    /**
     * Update one MedicalShop.
     * @param {MedicalShopUpdateArgs} args - Arguments to update one MedicalShop.
     * @example
     * // Update one MedicalShop
     * const medicalShop = await prisma.medicalShop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MedicalShopUpdateArgs>(
      args: SelectSubset<T, MedicalShopUpdateArgs>
    ): CheckSelect<T, Prisma__MedicalShopClient<MedicalShop>, Prisma__MedicalShopClient<MedicalShopGetPayload<T>>>

    /**
     * Delete zero or more MedicalShops.
     * @param {MedicalShopDeleteManyArgs} args - Arguments to filter MedicalShops to delete.
     * @example
     * // Delete a few MedicalShops
     * const { count } = await prisma.medicalShop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MedicalShopDeleteManyArgs>(
      args?: SelectSubset<T, MedicalShopDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalShops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalShopUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MedicalShops
     * const medicalShop = await prisma.medicalShop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MedicalShopUpdateManyArgs>(
      args: SelectSubset<T, MedicalShopUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one MedicalShop.
     * @param {MedicalShopUpsertArgs} args - Arguments to update or create a MedicalShop.
     * @example
     * // Update or create a MedicalShop
     * const medicalShop = await prisma.medicalShop.upsert({
     *   create: {
     *     // ... data to create a MedicalShop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MedicalShop we want to update
     *   }
     * })
    **/
    upsert<T extends MedicalShopUpsertArgs>(
      args: SelectSubset<T, MedicalShopUpsertArgs>
    ): CheckSelect<T, Prisma__MedicalShopClient<MedicalShop>, Prisma__MedicalShopClient<MedicalShopGetPayload<T>>>

    /**
     * Count the number of MedicalShops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalShopCountArgs} args - Arguments to filter MedicalShops to count.
     * @example
     * // Count the number of MedicalShops
     * const count = await prisma.medicalShop.count({
     *   where: {
     *     // ... the filter for the MedicalShops we want to count
     *   }
     * })
    **/
    count<T extends MedicalShopCountArgs>(
      args?: Subset<T, MedicalShopCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicalShopCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MedicalShop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalShopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicalShopAggregateArgs>(args: Subset<T, MedicalShopAggregateArgs>): PrismaPromise<GetMedicalShopAggregateType<T>>

    /**
     * Group by MedicalShop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalShopGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicalShopGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicalShopGroupByArgs['orderBy'] }
        : { orderBy?: MedicalShopGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicalShopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicalShopGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for MedicalShop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MedicalShopClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * MedicalShop findUnique
   */
  export type MedicalShopFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the MedicalShop
     * 
    **/
    select?: MedicalShopSelect | null
    /**
     * Throw an Error if a MedicalShop can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which MedicalShop to fetch.
     * 
    **/
    where: MedicalShopWhereUniqueInput
  }


  /**
   * MedicalShop findFirst
   */
  export type MedicalShopFindFirstArgs = {
    /**
     * Select specific fields to fetch from the MedicalShop
     * 
    **/
    select?: MedicalShopSelect | null
    /**
     * Throw an Error if a MedicalShop can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which MedicalShop to fetch.
     * 
    **/
    where?: MedicalShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalShops to fetch.
     * 
    **/
    orderBy?: Enumerable<MedicalShopOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalShops.
     * 
    **/
    cursor?: MedicalShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalShops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalShops.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalShops.
     * 
    **/
    distinct?: Enumerable<MedicalShopScalarFieldEnum>
  }


  /**
   * MedicalShop findMany
   */
  export type MedicalShopFindManyArgs = {
    /**
     * Select specific fields to fetch from the MedicalShop
     * 
    **/
    select?: MedicalShopSelect | null
    /**
     * Filter, which MedicalShops to fetch.
     * 
    **/
    where?: MedicalShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalShops to fetch.
     * 
    **/
    orderBy?: Enumerable<MedicalShopOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MedicalShops.
     * 
    **/
    cursor?: MedicalShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalShops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalShops.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MedicalShopScalarFieldEnum>
  }


  /**
   * MedicalShop create
   */
  export type MedicalShopCreateArgs = {
    /**
     * Select specific fields to fetch from the MedicalShop
     * 
    **/
    select?: MedicalShopSelect | null
    /**
     * The data needed to create a MedicalShop.
     * 
    **/
    data: XOR<MedicalShopCreateInput, MedicalShopUncheckedCreateInput>
  }


  /**
   * MedicalShop createMany
   */
  export type MedicalShopCreateManyArgs = {
    data: Enumerable<MedicalShopCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MedicalShop update
   */
  export type MedicalShopUpdateArgs = {
    /**
     * Select specific fields to fetch from the MedicalShop
     * 
    **/
    select?: MedicalShopSelect | null
    /**
     * The data needed to update a MedicalShop.
     * 
    **/
    data: XOR<MedicalShopUpdateInput, MedicalShopUncheckedUpdateInput>
    /**
     * Choose, which MedicalShop to update.
     * 
    **/
    where: MedicalShopWhereUniqueInput
  }


  /**
   * MedicalShop updateMany
   */
  export type MedicalShopUpdateManyArgs = {
    data: XOR<MedicalShopUpdateManyMutationInput, MedicalShopUncheckedUpdateManyInput>
    where?: MedicalShopWhereInput
  }


  /**
   * MedicalShop upsert
   */
  export type MedicalShopUpsertArgs = {
    /**
     * Select specific fields to fetch from the MedicalShop
     * 
    **/
    select?: MedicalShopSelect | null
    /**
     * The filter to search for the MedicalShop to update in case it exists.
     * 
    **/
    where: MedicalShopWhereUniqueInput
    /**
     * In case the MedicalShop found by the `where` argument doesn't exist, create a new MedicalShop with this data.
     * 
    **/
    create: XOR<MedicalShopCreateInput, MedicalShopUncheckedCreateInput>
    /**
     * In case the MedicalShop was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<MedicalShopUpdateInput, MedicalShopUncheckedUpdateInput>
  }


  /**
   * MedicalShop delete
   */
  export type MedicalShopDeleteArgs = {
    /**
     * Select specific fields to fetch from the MedicalShop
     * 
    **/
    select?: MedicalShopSelect | null
    /**
     * Filter which MedicalShop to delete.
     * 
    **/
    where: MedicalShopWhereUniqueInput
  }


  /**
   * MedicalShop deleteMany
   */
  export type MedicalShopDeleteManyArgs = {
    where?: MedicalShopWhereInput
  }


  /**
   * MedicalShop without action
   */
  export type MedicalShopArgs = {
    /**
     * Select specific fields to fetch from the MedicalShop
     * 
    **/
    select?: MedicalShopSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const HospitalScalarFieldEnum: {
    ID: 'ID',
    Name: 'Name',
    Phone: 'Phone',
    Address: 'Address',
    IsolationBeds: 'IsolationBeds',
    NormalBeds: 'NormalBeds',
    Ventilators: 'Ventilators'
  };

  export type HospitalScalarFieldEnum = (typeof HospitalScalarFieldEnum)[keyof typeof HospitalScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    ID: 'ID',
    Name: 'Name',
    IsEmergency: 'IsEmergency',
    bloodBankID: 'bloodBankID',
    oxygenBankID: 'oxygenBankID',
    hospitalID: 'hospitalID',
    ambulanceServiceId: 'ambulanceServiceId'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const BloodBankScalarFieldEnum: {
    ID: 'ID',
    Name: 'Name',
    Incharge: 'Incharge',
    Address: 'Address'
  };

  export type BloodBankScalarFieldEnum = (typeof BloodBankScalarFieldEnum)[keyof typeof BloodBankScalarFieldEnum]


  export const OxygenBankScalarFieldEnum: {
    ID: 'ID',
    Name: 'Name',
    Phone: 'Phone',
    Address: 'Address'
  };

  export type OxygenBankScalarFieldEnum = (typeof OxygenBankScalarFieldEnum)[keyof typeof OxygenBankScalarFieldEnum]


  export const AmbulanceServiceScalarFieldEnum: {
    Id: 'Id',
    Name: 'Name',
    Phone: 'Phone',
    Address: 'Address'
  };

  export type AmbulanceServiceScalarFieldEnum = (typeof AmbulanceServiceScalarFieldEnum)[keyof typeof AmbulanceServiceScalarFieldEnum]


  export const MedicalShopScalarFieldEnum: {
    Id: 'Id',
    Name: 'Name',
    Phone: 'Phone',
    Address: 'Address'
  };

  export type MedicalShopScalarFieldEnum = (typeof MedicalShopScalarFieldEnum)[keyof typeof MedicalShopScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type HospitalWhereInput = {
    AND?: Enumerable<HospitalWhereInput>
    OR?: Enumerable<HospitalWhereInput>
    NOT?: Enumerable<HospitalWhereInput>
    ID?: IntFilter | number
    Name?: StringFilter | string
    Phone?: IntFilter | number
    Address?: StringFilter | string
    IsolationBeds?: IntFilter | number
    NormalBeds?: IntFilter | number
    Ventilators?: IntFilter | number
    Patient?: PatientListRelationFilter
  }

  export type HospitalOrderByInput = {
    ID?: SortOrder
    Name?: SortOrder
    Phone?: SortOrder
    Address?: SortOrder
    IsolationBeds?: SortOrder
    NormalBeds?: SortOrder
    Ventilators?: SortOrder
  }

  export type HospitalWhereUniqueInput = {
    ID?: number
  }

  export type HospitalScalarWhereWithAggregatesInput = {
    AND?: Enumerable<HospitalScalarWhereWithAggregatesInput>
    OR?: Enumerable<HospitalScalarWhereWithAggregatesInput>
    NOT?: Enumerable<HospitalScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    Name?: StringWithAggregatesFilter | string
    Phone?: IntWithAggregatesFilter | number
    Address?: StringWithAggregatesFilter | string
    IsolationBeds?: IntWithAggregatesFilter | number
    NormalBeds?: IntWithAggregatesFilter | number
    Ventilators?: IntWithAggregatesFilter | number
  }

  export type PatientWhereInput = {
    AND?: Enumerable<PatientWhereInput>
    OR?: Enumerable<PatientWhereInput>
    NOT?: Enumerable<PatientWhereInput>
    ID?: IntFilter | number
    Name?: StringFilter | string
    IsEmergency?: BoolFilter | boolean
    Hospital?: XOR<HospitalRelationFilter, HospitalWhereInput>
    Ambulance?: XOR<AmbulanceServiceRelationFilter, AmbulanceServiceWhereInput>
    BloodBank?: XOR<BloodBankRelationFilter, BloodBankWhereInput>
    OxygenBank?: XOR<OxygenBankRelationFilter, OxygenBankWhereInput>
    bloodBankID?: IntFilter | number
    oxygenBankID?: IntFilter | number
    hospitalID?: IntFilter | number
    ambulanceServiceId?: IntFilter | number
  }

  export type PatientOrderByInput = {
    ID?: SortOrder
    Name?: SortOrder
    IsEmergency?: SortOrder
    bloodBankID?: SortOrder
    oxygenBankID?: SortOrder
    hospitalID?: SortOrder
    ambulanceServiceId?: SortOrder
  }

  export type PatientWhereUniqueInput = {
    ID?: number
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PatientScalarWhereWithAggregatesInput>
    OR?: Enumerable<PatientScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PatientScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    Name?: StringWithAggregatesFilter | string
    IsEmergency?: BoolWithAggregatesFilter | boolean
    bloodBankID?: IntWithAggregatesFilter | number
    oxygenBankID?: IntWithAggregatesFilter | number
    hospitalID?: IntWithAggregatesFilter | number
    ambulanceServiceId?: IntWithAggregatesFilter | number
  }

  export type BloodBankWhereInput = {
    AND?: Enumerable<BloodBankWhereInput>
    OR?: Enumerable<BloodBankWhereInput>
    NOT?: Enumerable<BloodBankWhereInput>
    ID?: IntFilter | number
    Name?: StringFilter | string
    Incharge?: StringFilter | string
    Address?: StringFilter | string
    Patient?: PatientListRelationFilter
  }

  export type BloodBankOrderByInput = {
    ID?: SortOrder
    Name?: SortOrder
    Incharge?: SortOrder
    Address?: SortOrder
  }

  export type BloodBankWhereUniqueInput = {
    ID?: number
  }

  export type BloodBankScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BloodBankScalarWhereWithAggregatesInput>
    OR?: Enumerable<BloodBankScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BloodBankScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    Name?: StringWithAggregatesFilter | string
    Incharge?: StringWithAggregatesFilter | string
    Address?: StringWithAggregatesFilter | string
  }

  export type OxygenBankWhereInput = {
    AND?: Enumerable<OxygenBankWhereInput>
    OR?: Enumerable<OxygenBankWhereInput>
    NOT?: Enumerable<OxygenBankWhereInput>
    ID?: IntFilter | number
    Name?: StringFilter | string
    Phone?: IntFilter | number
    Address?: StringFilter | string
    Patient?: PatientListRelationFilter
  }

  export type OxygenBankOrderByInput = {
    ID?: SortOrder
    Name?: SortOrder
    Phone?: SortOrder
    Address?: SortOrder
  }

  export type OxygenBankWhereUniqueInput = {
    ID?: number
  }

  export type OxygenBankScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OxygenBankScalarWhereWithAggregatesInput>
    OR?: Enumerable<OxygenBankScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OxygenBankScalarWhereWithAggregatesInput>
    ID?: IntWithAggregatesFilter | number
    Name?: StringWithAggregatesFilter | string
    Phone?: IntWithAggregatesFilter | number
    Address?: StringWithAggregatesFilter | string
  }

  export type AmbulanceServiceWhereInput = {
    AND?: Enumerable<AmbulanceServiceWhereInput>
    OR?: Enumerable<AmbulanceServiceWhereInput>
    NOT?: Enumerable<AmbulanceServiceWhereInput>
    Id?: IntFilter | number
    Name?: StringFilter | string
    Phone?: IntFilter | number
    Address?: StringFilter | string
    Patient?: PatientListRelationFilter
  }

  export type AmbulanceServiceOrderByInput = {
    Id?: SortOrder
    Name?: SortOrder
    Phone?: SortOrder
    Address?: SortOrder
  }

  export type AmbulanceServiceWhereUniqueInput = {
    Id?: number
  }

  export type AmbulanceServiceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AmbulanceServiceScalarWhereWithAggregatesInput>
    OR?: Enumerable<AmbulanceServiceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AmbulanceServiceScalarWhereWithAggregatesInput>
    Id?: IntWithAggregatesFilter | number
    Name?: StringWithAggregatesFilter | string
    Phone?: IntWithAggregatesFilter | number
    Address?: StringWithAggregatesFilter | string
  }

  export type MedicalShopWhereInput = {
    AND?: Enumerable<MedicalShopWhereInput>
    OR?: Enumerable<MedicalShopWhereInput>
    NOT?: Enumerable<MedicalShopWhereInput>
    Id?: IntFilter | number
    Name?: StringFilter | string
    Phone?: IntFilter | number
    Address?: StringFilter | string
  }

  export type MedicalShopOrderByInput = {
    Id?: SortOrder
    Name?: SortOrder
    Phone?: SortOrder
    Address?: SortOrder
  }

  export type MedicalShopWhereUniqueInput = {
    Id?: number
  }

  export type MedicalShopScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MedicalShopScalarWhereWithAggregatesInput>
    OR?: Enumerable<MedicalShopScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MedicalShopScalarWhereWithAggregatesInput>
    Id?: IntWithAggregatesFilter | number
    Name?: StringWithAggregatesFilter | string
    Phone?: IntWithAggregatesFilter | number
    Address?: StringWithAggregatesFilter | string
  }

  export type HospitalCreateInput = {
    Name: string
    Phone: number
    Address: string
    IsolationBeds: number
    NormalBeds: number
    Ventilators: number
    Patient?: PatientCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUncheckedCreateInput = {
    ID?: number
    Name: string
    Phone: number
    Address: string
    IsolationBeds: number
    NormalBeds: number
    Ventilators: number
    Patient?: PatientUncheckedCreateNestedManyWithoutHospitalInput
  }

  export type HospitalUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    IsolationBeds?: IntFieldUpdateOperationsInput | number
    NormalBeds?: IntFieldUpdateOperationsInput | number
    Ventilators?: IntFieldUpdateOperationsInput | number
    Patient?: PatientUpdateManyWithoutHospitalInput
  }

  export type HospitalUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    IsolationBeds?: IntFieldUpdateOperationsInput | number
    NormalBeds?: IntFieldUpdateOperationsInput | number
    Ventilators?: IntFieldUpdateOperationsInput | number
    Patient?: PatientUncheckedUpdateManyWithoutHospitalInput
  }

  export type HospitalCreateManyInput = {
    ID?: number
    Name: string
    Phone: number
    Address: string
    IsolationBeds: number
    NormalBeds: number
    Ventilators: number
  }

  export type HospitalUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    IsolationBeds?: IntFieldUpdateOperationsInput | number
    NormalBeds?: IntFieldUpdateOperationsInput | number
    Ventilators?: IntFieldUpdateOperationsInput | number
  }

  export type HospitalUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    IsolationBeds?: IntFieldUpdateOperationsInput | number
    NormalBeds?: IntFieldUpdateOperationsInput | number
    Ventilators?: IntFieldUpdateOperationsInput | number
  }

  export type PatientCreateInput = {
    Name: string
    IsEmergency?: boolean
    Hospital: HospitalCreateNestedOneWithoutPatientInput
    Ambulance: AmbulanceServiceCreateNestedOneWithoutPatientInput
    BloodBank: BloodBankCreateNestedOneWithoutPatientInput
    OxygenBank: OxygenBankCreateNestedOneWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    ID?: number
    Name: string
    IsEmergency?: boolean
    bloodBankID: number
    oxygenBankID: number
    hospitalID: number
    ambulanceServiceId: number
  }

  export type PatientUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    IsEmergency?: BoolFieldUpdateOperationsInput | boolean
    Hospital?: HospitalUpdateOneRequiredWithoutPatientInput
    Ambulance?: AmbulanceServiceUpdateOneRequiredWithoutPatientInput
    BloodBank?: BloodBankUpdateOneRequiredWithoutPatientInput
    OxygenBank?: OxygenBankUpdateOneRequiredWithoutPatientInput
  }

  export type PatientUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    IsEmergency?: BoolFieldUpdateOperationsInput | boolean
    bloodBankID?: IntFieldUpdateOperationsInput | number
    oxygenBankID?: IntFieldUpdateOperationsInput | number
    hospitalID?: IntFieldUpdateOperationsInput | number
    ambulanceServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type PatientCreateManyInput = {
    ID?: number
    Name: string
    IsEmergency?: boolean
    bloodBankID: number
    oxygenBankID: number
    hospitalID: number
    ambulanceServiceId: number
  }

  export type PatientUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    IsEmergency?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PatientUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    IsEmergency?: BoolFieldUpdateOperationsInput | boolean
    bloodBankID?: IntFieldUpdateOperationsInput | number
    oxygenBankID?: IntFieldUpdateOperationsInput | number
    hospitalID?: IntFieldUpdateOperationsInput | number
    ambulanceServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type BloodBankCreateInput = {
    Name: string
    Incharge: string
    Address: string
    Patient?: PatientCreateNestedManyWithoutBloodBankInput
  }

  export type BloodBankUncheckedCreateInput = {
    ID?: number
    Name: string
    Incharge: string
    Address: string
    Patient?: PatientUncheckedCreateNestedManyWithoutBloodBankInput
  }

  export type BloodBankUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Incharge?: StringFieldUpdateOperationsInput | string
    Address?: StringFieldUpdateOperationsInput | string
    Patient?: PatientUpdateManyWithoutBloodBankInput
  }

  export type BloodBankUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Incharge?: StringFieldUpdateOperationsInput | string
    Address?: StringFieldUpdateOperationsInput | string
    Patient?: PatientUncheckedUpdateManyWithoutBloodBankInput
  }

  export type BloodBankCreateManyInput = {
    ID?: number
    Name: string
    Incharge: string
    Address: string
  }

  export type BloodBankUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Incharge?: StringFieldUpdateOperationsInput | string
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type BloodBankUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Incharge?: StringFieldUpdateOperationsInput | string
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type OxygenBankCreateInput = {
    Name: string
    Phone: number
    Address: string
    Patient?: PatientCreateNestedManyWithoutOxygenBankInput
  }

  export type OxygenBankUncheckedCreateInput = {
    ID?: number
    Name: string
    Phone: number
    Address: string
    Patient?: PatientUncheckedCreateNestedManyWithoutOxygenBankInput
  }

  export type OxygenBankUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    Patient?: PatientUpdateManyWithoutOxygenBankInput
  }

  export type OxygenBankUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    Patient?: PatientUncheckedUpdateManyWithoutOxygenBankInput
  }

  export type OxygenBankCreateManyInput = {
    ID?: number
    Name: string
    Phone: number
    Address: string
  }

  export type OxygenBankUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type OxygenBankUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type AmbulanceServiceCreateInput = {
    Name: string
    Phone: number
    Address: string
    Patient?: PatientCreateNestedManyWithoutAmbulanceInput
  }

  export type AmbulanceServiceUncheckedCreateInput = {
    Id?: number
    Name: string
    Phone: number
    Address: string
    Patient?: PatientUncheckedCreateNestedManyWithoutAmbulanceInput
  }

  export type AmbulanceServiceUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    Patient?: PatientUpdateManyWithoutAmbulanceInput
  }

  export type AmbulanceServiceUncheckedUpdateInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    Patient?: PatientUncheckedUpdateManyWithoutAmbulanceInput
  }

  export type AmbulanceServiceCreateManyInput = {
    Id?: number
    Name: string
    Phone: number
    Address: string
  }

  export type AmbulanceServiceUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type AmbulanceServiceUncheckedUpdateManyInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type MedicalShopCreateInput = {
    Name: string
    Phone: number
    Address: string
  }

  export type MedicalShopUncheckedCreateInput = {
    Id?: number
    Name: string
    Phone: number
    Address: string
  }

  export type MedicalShopUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type MedicalShopUncheckedUpdateInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type MedicalShopCreateManyInput = {
    Id?: number
    Name: string
    Phone: number
    Address: string
  }

  export type MedicalShopUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type MedicalShopUncheckedUpdateManyInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type PatientListRelationFilter = {
    every?: PatientWhereInput
    some?: PatientWhereInput
    none?: PatientWhereInput
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type HospitalRelationFilter = {
    is?: HospitalWhereInput
    isNot?: HospitalWhereInput
  }

  export type AmbulanceServiceRelationFilter = {
    is?: AmbulanceServiceWhereInput
    isNot?: AmbulanceServiceWhereInput
  }

  export type BloodBankRelationFilter = {
    is?: BloodBankWhereInput
    isNot?: BloodBankWhereInput
  }

  export type OxygenBankRelationFilter = {
    is?: OxygenBankWhereInput
    isNot?: OxygenBankWhereInput
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolFilter
    _max?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolFilter
  }

  export type PatientCreateNestedManyWithoutHospitalInput = {
    create?: XOR<Enumerable<PatientCreateWithoutHospitalInput>, Enumerable<PatientUncheckedCreateWithoutHospitalInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutHospitalInput>
    createMany?: PatientCreateManyHospitalInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
  }

  export type PatientUncheckedCreateNestedManyWithoutHospitalInput = {
    create?: XOR<Enumerable<PatientCreateWithoutHospitalInput>, Enumerable<PatientUncheckedCreateWithoutHospitalInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutHospitalInput>
    createMany?: PatientCreateManyHospitalInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PatientUpdateManyWithoutHospitalInput = {
    create?: XOR<Enumerable<PatientCreateWithoutHospitalInput>, Enumerable<PatientUncheckedCreateWithoutHospitalInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutHospitalInput>
    upsert?: Enumerable<PatientUpsertWithWhereUniqueWithoutHospitalInput>
    createMany?: PatientCreateManyHospitalInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
    set?: Enumerable<PatientWhereUniqueInput>
    disconnect?: Enumerable<PatientWhereUniqueInput>
    delete?: Enumerable<PatientWhereUniqueInput>
    update?: Enumerable<PatientUpdateWithWhereUniqueWithoutHospitalInput>
    updateMany?: Enumerable<PatientUpdateManyWithWhereWithoutHospitalInput>
    deleteMany?: Enumerable<PatientScalarWhereInput>
  }

  export type PatientUncheckedUpdateManyWithoutHospitalInput = {
    create?: XOR<Enumerable<PatientCreateWithoutHospitalInput>, Enumerable<PatientUncheckedCreateWithoutHospitalInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutHospitalInput>
    upsert?: Enumerable<PatientUpsertWithWhereUniqueWithoutHospitalInput>
    createMany?: PatientCreateManyHospitalInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
    set?: Enumerable<PatientWhereUniqueInput>
    disconnect?: Enumerable<PatientWhereUniqueInput>
    delete?: Enumerable<PatientWhereUniqueInput>
    update?: Enumerable<PatientUpdateWithWhereUniqueWithoutHospitalInput>
    updateMany?: Enumerable<PatientUpdateManyWithWhereWithoutHospitalInput>
    deleteMany?: Enumerable<PatientScalarWhereInput>
  }

  export type HospitalCreateNestedOneWithoutPatientInput = {
    create?: XOR<HospitalCreateWithoutPatientInput, HospitalUncheckedCreateWithoutPatientInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutPatientInput
    connect?: HospitalWhereUniqueInput
  }

  export type AmbulanceServiceCreateNestedOneWithoutPatientInput = {
    create?: XOR<AmbulanceServiceCreateWithoutPatientInput, AmbulanceServiceUncheckedCreateWithoutPatientInput>
    connectOrCreate?: AmbulanceServiceCreateOrConnectWithoutPatientInput
    connect?: AmbulanceServiceWhereUniqueInput
  }

  export type BloodBankCreateNestedOneWithoutPatientInput = {
    create?: XOR<BloodBankCreateWithoutPatientInput, BloodBankUncheckedCreateWithoutPatientInput>
    connectOrCreate?: BloodBankCreateOrConnectWithoutPatientInput
    connect?: BloodBankWhereUniqueInput
  }

  export type OxygenBankCreateNestedOneWithoutPatientInput = {
    create?: XOR<OxygenBankCreateWithoutPatientInput, OxygenBankUncheckedCreateWithoutPatientInput>
    connectOrCreate?: OxygenBankCreateOrConnectWithoutPatientInput
    connect?: OxygenBankWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type HospitalUpdateOneRequiredWithoutPatientInput = {
    create?: XOR<HospitalCreateWithoutPatientInput, HospitalUncheckedCreateWithoutPatientInput>
    connectOrCreate?: HospitalCreateOrConnectWithoutPatientInput
    upsert?: HospitalUpsertWithoutPatientInput
    connect?: HospitalWhereUniqueInput
    update?: XOR<HospitalUpdateWithoutPatientInput, HospitalUncheckedUpdateWithoutPatientInput>
  }

  export type AmbulanceServiceUpdateOneRequiredWithoutPatientInput = {
    create?: XOR<AmbulanceServiceCreateWithoutPatientInput, AmbulanceServiceUncheckedCreateWithoutPatientInput>
    connectOrCreate?: AmbulanceServiceCreateOrConnectWithoutPatientInput
    upsert?: AmbulanceServiceUpsertWithoutPatientInput
    connect?: AmbulanceServiceWhereUniqueInput
    update?: XOR<AmbulanceServiceUpdateWithoutPatientInput, AmbulanceServiceUncheckedUpdateWithoutPatientInput>
  }

  export type BloodBankUpdateOneRequiredWithoutPatientInput = {
    create?: XOR<BloodBankCreateWithoutPatientInput, BloodBankUncheckedCreateWithoutPatientInput>
    connectOrCreate?: BloodBankCreateOrConnectWithoutPatientInput
    upsert?: BloodBankUpsertWithoutPatientInput
    connect?: BloodBankWhereUniqueInput
    update?: XOR<BloodBankUpdateWithoutPatientInput, BloodBankUncheckedUpdateWithoutPatientInput>
  }

  export type OxygenBankUpdateOneRequiredWithoutPatientInput = {
    create?: XOR<OxygenBankCreateWithoutPatientInput, OxygenBankUncheckedCreateWithoutPatientInput>
    connectOrCreate?: OxygenBankCreateOrConnectWithoutPatientInput
    upsert?: OxygenBankUpsertWithoutPatientInput
    connect?: OxygenBankWhereUniqueInput
    update?: XOR<OxygenBankUpdateWithoutPatientInput, OxygenBankUncheckedUpdateWithoutPatientInput>
  }

  export type PatientCreateNestedManyWithoutBloodBankInput = {
    create?: XOR<Enumerable<PatientCreateWithoutBloodBankInput>, Enumerable<PatientUncheckedCreateWithoutBloodBankInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutBloodBankInput>
    createMany?: PatientCreateManyBloodBankInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
  }

  export type PatientUncheckedCreateNestedManyWithoutBloodBankInput = {
    create?: XOR<Enumerable<PatientCreateWithoutBloodBankInput>, Enumerable<PatientUncheckedCreateWithoutBloodBankInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutBloodBankInput>
    createMany?: PatientCreateManyBloodBankInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
  }

  export type PatientUpdateManyWithoutBloodBankInput = {
    create?: XOR<Enumerable<PatientCreateWithoutBloodBankInput>, Enumerable<PatientUncheckedCreateWithoutBloodBankInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutBloodBankInput>
    upsert?: Enumerable<PatientUpsertWithWhereUniqueWithoutBloodBankInput>
    createMany?: PatientCreateManyBloodBankInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
    set?: Enumerable<PatientWhereUniqueInput>
    disconnect?: Enumerable<PatientWhereUniqueInput>
    delete?: Enumerable<PatientWhereUniqueInput>
    update?: Enumerable<PatientUpdateWithWhereUniqueWithoutBloodBankInput>
    updateMany?: Enumerable<PatientUpdateManyWithWhereWithoutBloodBankInput>
    deleteMany?: Enumerable<PatientScalarWhereInput>
  }

  export type PatientUncheckedUpdateManyWithoutBloodBankInput = {
    create?: XOR<Enumerable<PatientCreateWithoutBloodBankInput>, Enumerable<PatientUncheckedCreateWithoutBloodBankInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutBloodBankInput>
    upsert?: Enumerable<PatientUpsertWithWhereUniqueWithoutBloodBankInput>
    createMany?: PatientCreateManyBloodBankInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
    set?: Enumerable<PatientWhereUniqueInput>
    disconnect?: Enumerable<PatientWhereUniqueInput>
    delete?: Enumerable<PatientWhereUniqueInput>
    update?: Enumerable<PatientUpdateWithWhereUniqueWithoutBloodBankInput>
    updateMany?: Enumerable<PatientUpdateManyWithWhereWithoutBloodBankInput>
    deleteMany?: Enumerable<PatientScalarWhereInput>
  }

  export type PatientCreateNestedManyWithoutOxygenBankInput = {
    create?: XOR<Enumerable<PatientCreateWithoutOxygenBankInput>, Enumerable<PatientUncheckedCreateWithoutOxygenBankInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutOxygenBankInput>
    createMany?: PatientCreateManyOxygenBankInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
  }

  export type PatientUncheckedCreateNestedManyWithoutOxygenBankInput = {
    create?: XOR<Enumerable<PatientCreateWithoutOxygenBankInput>, Enumerable<PatientUncheckedCreateWithoutOxygenBankInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutOxygenBankInput>
    createMany?: PatientCreateManyOxygenBankInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
  }

  export type PatientUpdateManyWithoutOxygenBankInput = {
    create?: XOR<Enumerable<PatientCreateWithoutOxygenBankInput>, Enumerable<PatientUncheckedCreateWithoutOxygenBankInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutOxygenBankInput>
    upsert?: Enumerable<PatientUpsertWithWhereUniqueWithoutOxygenBankInput>
    createMany?: PatientCreateManyOxygenBankInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
    set?: Enumerable<PatientWhereUniqueInput>
    disconnect?: Enumerable<PatientWhereUniqueInput>
    delete?: Enumerable<PatientWhereUniqueInput>
    update?: Enumerable<PatientUpdateWithWhereUniqueWithoutOxygenBankInput>
    updateMany?: Enumerable<PatientUpdateManyWithWhereWithoutOxygenBankInput>
    deleteMany?: Enumerable<PatientScalarWhereInput>
  }

  export type PatientUncheckedUpdateManyWithoutOxygenBankInput = {
    create?: XOR<Enumerable<PatientCreateWithoutOxygenBankInput>, Enumerable<PatientUncheckedCreateWithoutOxygenBankInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutOxygenBankInput>
    upsert?: Enumerable<PatientUpsertWithWhereUniqueWithoutOxygenBankInput>
    createMany?: PatientCreateManyOxygenBankInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
    set?: Enumerable<PatientWhereUniqueInput>
    disconnect?: Enumerable<PatientWhereUniqueInput>
    delete?: Enumerable<PatientWhereUniqueInput>
    update?: Enumerable<PatientUpdateWithWhereUniqueWithoutOxygenBankInput>
    updateMany?: Enumerable<PatientUpdateManyWithWhereWithoutOxygenBankInput>
    deleteMany?: Enumerable<PatientScalarWhereInput>
  }

  export type PatientCreateNestedManyWithoutAmbulanceInput = {
    create?: XOR<Enumerable<PatientCreateWithoutAmbulanceInput>, Enumerable<PatientUncheckedCreateWithoutAmbulanceInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutAmbulanceInput>
    createMany?: PatientCreateManyAmbulanceInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
  }

  export type PatientUncheckedCreateNestedManyWithoutAmbulanceInput = {
    create?: XOR<Enumerable<PatientCreateWithoutAmbulanceInput>, Enumerable<PatientUncheckedCreateWithoutAmbulanceInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutAmbulanceInput>
    createMany?: PatientCreateManyAmbulanceInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
  }

  export type PatientUpdateManyWithoutAmbulanceInput = {
    create?: XOR<Enumerable<PatientCreateWithoutAmbulanceInput>, Enumerable<PatientUncheckedCreateWithoutAmbulanceInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutAmbulanceInput>
    upsert?: Enumerable<PatientUpsertWithWhereUniqueWithoutAmbulanceInput>
    createMany?: PatientCreateManyAmbulanceInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
    set?: Enumerable<PatientWhereUniqueInput>
    disconnect?: Enumerable<PatientWhereUniqueInput>
    delete?: Enumerable<PatientWhereUniqueInput>
    update?: Enumerable<PatientUpdateWithWhereUniqueWithoutAmbulanceInput>
    updateMany?: Enumerable<PatientUpdateManyWithWhereWithoutAmbulanceInput>
    deleteMany?: Enumerable<PatientScalarWhereInput>
  }

  export type PatientUncheckedUpdateManyWithoutAmbulanceInput = {
    create?: XOR<Enumerable<PatientCreateWithoutAmbulanceInput>, Enumerable<PatientUncheckedCreateWithoutAmbulanceInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutAmbulanceInput>
    upsert?: Enumerable<PatientUpsertWithWhereUniqueWithoutAmbulanceInput>
    createMany?: PatientCreateManyAmbulanceInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
    set?: Enumerable<PatientWhereUniqueInput>
    disconnect?: Enumerable<PatientWhereUniqueInput>
    delete?: Enumerable<PatientWhereUniqueInput>
    update?: Enumerable<PatientUpdateWithWhereUniqueWithoutAmbulanceInput>
    updateMany?: Enumerable<PatientUpdateManyWithWhereWithoutAmbulanceInput>
    deleteMany?: Enumerable<PatientScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolFilter
    _max?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolFilter
  }

  export type PatientCreateWithoutHospitalInput = {
    Name: string
    IsEmergency?: boolean
    Ambulance: AmbulanceServiceCreateNestedOneWithoutPatientInput
    BloodBank: BloodBankCreateNestedOneWithoutPatientInput
    OxygenBank: OxygenBankCreateNestedOneWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutHospitalInput = {
    ID?: number
    Name: string
    IsEmergency?: boolean
    bloodBankID: number
    oxygenBankID: number
    ambulanceServiceId: number
  }

  export type PatientCreateOrConnectWithoutHospitalInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutHospitalInput, PatientUncheckedCreateWithoutHospitalInput>
  }

  export type PatientCreateManyHospitalInputEnvelope = {
    data: Enumerable<PatientCreateManyHospitalInput>
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithWhereUniqueWithoutHospitalInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutHospitalInput, PatientUncheckedUpdateWithoutHospitalInput>
    create: XOR<PatientCreateWithoutHospitalInput, PatientUncheckedCreateWithoutHospitalInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutHospitalInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutHospitalInput, PatientUncheckedUpdateWithoutHospitalInput>
  }

  export type PatientUpdateManyWithWhereWithoutHospitalInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientScalarWhereInput = {
    AND?: Enumerable<PatientScalarWhereInput>
    OR?: Enumerable<PatientScalarWhereInput>
    NOT?: Enumerable<PatientScalarWhereInput>
    ID?: IntFilter | number
    Name?: StringFilter | string
    IsEmergency?: BoolFilter | boolean
    bloodBankID?: IntFilter | number
    oxygenBankID?: IntFilter | number
    hospitalID?: IntFilter | number
    ambulanceServiceId?: IntFilter | number
  }

  export type HospitalCreateWithoutPatientInput = {
    Name: string
    Phone: number
    Address: string
    IsolationBeds: number
    NormalBeds: number
    Ventilators: number
  }

  export type HospitalUncheckedCreateWithoutPatientInput = {
    ID?: number
    Name: string
    Phone: number
    Address: string
    IsolationBeds: number
    NormalBeds: number
    Ventilators: number
  }

  export type HospitalCreateOrConnectWithoutPatientInput = {
    where: HospitalWhereUniqueInput
    create: XOR<HospitalCreateWithoutPatientInput, HospitalUncheckedCreateWithoutPatientInput>
  }

  export type AmbulanceServiceCreateWithoutPatientInput = {
    Name: string
    Phone: number
    Address: string
  }

  export type AmbulanceServiceUncheckedCreateWithoutPatientInput = {
    Id?: number
    Name: string
    Phone: number
    Address: string
  }

  export type AmbulanceServiceCreateOrConnectWithoutPatientInput = {
    where: AmbulanceServiceWhereUniqueInput
    create: XOR<AmbulanceServiceCreateWithoutPatientInput, AmbulanceServiceUncheckedCreateWithoutPatientInput>
  }

  export type BloodBankCreateWithoutPatientInput = {
    Name: string
    Incharge: string
    Address: string
  }

  export type BloodBankUncheckedCreateWithoutPatientInput = {
    ID?: number
    Name: string
    Incharge: string
    Address: string
  }

  export type BloodBankCreateOrConnectWithoutPatientInput = {
    where: BloodBankWhereUniqueInput
    create: XOR<BloodBankCreateWithoutPatientInput, BloodBankUncheckedCreateWithoutPatientInput>
  }

  export type OxygenBankCreateWithoutPatientInput = {
    Name: string
    Phone: number
    Address: string
  }

  export type OxygenBankUncheckedCreateWithoutPatientInput = {
    ID?: number
    Name: string
    Phone: number
    Address: string
  }

  export type OxygenBankCreateOrConnectWithoutPatientInput = {
    where: OxygenBankWhereUniqueInput
    create: XOR<OxygenBankCreateWithoutPatientInput, OxygenBankUncheckedCreateWithoutPatientInput>
  }

  export type HospitalUpsertWithoutPatientInput = {
    update: XOR<HospitalUpdateWithoutPatientInput, HospitalUncheckedUpdateWithoutPatientInput>
    create: XOR<HospitalCreateWithoutPatientInput, HospitalUncheckedCreateWithoutPatientInput>
  }

  export type HospitalUpdateWithoutPatientInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    IsolationBeds?: IntFieldUpdateOperationsInput | number
    NormalBeds?: IntFieldUpdateOperationsInput | number
    Ventilators?: IntFieldUpdateOperationsInput | number
  }

  export type HospitalUncheckedUpdateWithoutPatientInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
    IsolationBeds?: IntFieldUpdateOperationsInput | number
    NormalBeds?: IntFieldUpdateOperationsInput | number
    Ventilators?: IntFieldUpdateOperationsInput | number
  }

  export type AmbulanceServiceUpsertWithoutPatientInput = {
    update: XOR<AmbulanceServiceUpdateWithoutPatientInput, AmbulanceServiceUncheckedUpdateWithoutPatientInput>
    create: XOR<AmbulanceServiceCreateWithoutPatientInput, AmbulanceServiceUncheckedCreateWithoutPatientInput>
  }

  export type AmbulanceServiceUpdateWithoutPatientInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type AmbulanceServiceUncheckedUpdateWithoutPatientInput = {
    Id?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type BloodBankUpsertWithoutPatientInput = {
    update: XOR<BloodBankUpdateWithoutPatientInput, BloodBankUncheckedUpdateWithoutPatientInput>
    create: XOR<BloodBankCreateWithoutPatientInput, BloodBankUncheckedCreateWithoutPatientInput>
  }

  export type BloodBankUpdateWithoutPatientInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Incharge?: StringFieldUpdateOperationsInput | string
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type BloodBankUncheckedUpdateWithoutPatientInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Incharge?: StringFieldUpdateOperationsInput | string
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type OxygenBankUpsertWithoutPatientInput = {
    update: XOR<OxygenBankUpdateWithoutPatientInput, OxygenBankUncheckedUpdateWithoutPatientInput>
    create: XOR<OxygenBankCreateWithoutPatientInput, OxygenBankUncheckedCreateWithoutPatientInput>
  }

  export type OxygenBankUpdateWithoutPatientInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type OxygenBankUncheckedUpdateWithoutPatientInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Phone?: IntFieldUpdateOperationsInput | number
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type PatientCreateWithoutBloodBankInput = {
    Name: string
    IsEmergency?: boolean
    Hospital: HospitalCreateNestedOneWithoutPatientInput
    Ambulance: AmbulanceServiceCreateNestedOneWithoutPatientInput
    OxygenBank: OxygenBankCreateNestedOneWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutBloodBankInput = {
    ID?: number
    Name: string
    IsEmergency?: boolean
    oxygenBankID: number
    hospitalID: number
    ambulanceServiceId: number
  }

  export type PatientCreateOrConnectWithoutBloodBankInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutBloodBankInput, PatientUncheckedCreateWithoutBloodBankInput>
  }

  export type PatientCreateManyBloodBankInputEnvelope = {
    data: Enumerable<PatientCreateManyBloodBankInput>
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithWhereUniqueWithoutBloodBankInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutBloodBankInput, PatientUncheckedUpdateWithoutBloodBankInput>
    create: XOR<PatientCreateWithoutBloodBankInput, PatientUncheckedCreateWithoutBloodBankInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutBloodBankInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutBloodBankInput, PatientUncheckedUpdateWithoutBloodBankInput>
  }

  export type PatientUpdateManyWithWhereWithoutBloodBankInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientCreateWithoutOxygenBankInput = {
    Name: string
    IsEmergency?: boolean
    Hospital: HospitalCreateNestedOneWithoutPatientInput
    Ambulance: AmbulanceServiceCreateNestedOneWithoutPatientInput
    BloodBank: BloodBankCreateNestedOneWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutOxygenBankInput = {
    ID?: number
    Name: string
    IsEmergency?: boolean
    bloodBankID: number
    hospitalID: number
    ambulanceServiceId: number
  }

  export type PatientCreateOrConnectWithoutOxygenBankInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutOxygenBankInput, PatientUncheckedCreateWithoutOxygenBankInput>
  }

  export type PatientCreateManyOxygenBankInputEnvelope = {
    data: Enumerable<PatientCreateManyOxygenBankInput>
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithWhereUniqueWithoutOxygenBankInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutOxygenBankInput, PatientUncheckedUpdateWithoutOxygenBankInput>
    create: XOR<PatientCreateWithoutOxygenBankInput, PatientUncheckedCreateWithoutOxygenBankInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutOxygenBankInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutOxygenBankInput, PatientUncheckedUpdateWithoutOxygenBankInput>
  }

  export type PatientUpdateManyWithWhereWithoutOxygenBankInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientCreateWithoutAmbulanceInput = {
    Name: string
    IsEmergency?: boolean
    Hospital: HospitalCreateNestedOneWithoutPatientInput
    BloodBank: BloodBankCreateNestedOneWithoutPatientInput
    OxygenBank: OxygenBankCreateNestedOneWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutAmbulanceInput = {
    ID?: number
    Name: string
    IsEmergency?: boolean
    bloodBankID: number
    oxygenBankID: number
    hospitalID: number
  }

  export type PatientCreateOrConnectWithoutAmbulanceInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutAmbulanceInput, PatientUncheckedCreateWithoutAmbulanceInput>
  }

  export type PatientCreateManyAmbulanceInputEnvelope = {
    data: Enumerable<PatientCreateManyAmbulanceInput>
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithWhereUniqueWithoutAmbulanceInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutAmbulanceInput, PatientUncheckedUpdateWithoutAmbulanceInput>
    create: XOR<PatientCreateWithoutAmbulanceInput, PatientUncheckedCreateWithoutAmbulanceInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutAmbulanceInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutAmbulanceInput, PatientUncheckedUpdateWithoutAmbulanceInput>
  }

  export type PatientUpdateManyWithWhereWithoutAmbulanceInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientCreateManyHospitalInput = {
    ID?: number
    Name: string
    IsEmergency?: boolean
    bloodBankID: number
    oxygenBankID: number
    ambulanceServiceId: number
  }

  export type PatientUpdateWithoutHospitalInput = {
    Name?: StringFieldUpdateOperationsInput | string
    IsEmergency?: BoolFieldUpdateOperationsInput | boolean
    Ambulance?: AmbulanceServiceUpdateOneRequiredWithoutPatientInput
    BloodBank?: BloodBankUpdateOneRequiredWithoutPatientInput
    OxygenBank?: OxygenBankUpdateOneRequiredWithoutPatientInput
  }

  export type PatientUncheckedUpdateWithoutHospitalInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    IsEmergency?: BoolFieldUpdateOperationsInput | boolean
    bloodBankID?: IntFieldUpdateOperationsInput | number
    oxygenBankID?: IntFieldUpdateOperationsInput | number
    ambulanceServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type PatientUncheckedUpdateManyWithoutPatientInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    IsEmergency?: BoolFieldUpdateOperationsInput | boolean
    bloodBankID?: IntFieldUpdateOperationsInput | number
    oxygenBankID?: IntFieldUpdateOperationsInput | number
    ambulanceServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type PatientCreateManyBloodBankInput = {
    ID?: number
    Name: string
    IsEmergency?: boolean
    oxygenBankID: number
    hospitalID: number
    ambulanceServiceId: number
  }

  export type PatientUpdateWithoutBloodBankInput = {
    Name?: StringFieldUpdateOperationsInput | string
    IsEmergency?: BoolFieldUpdateOperationsInput | boolean
    Hospital?: HospitalUpdateOneRequiredWithoutPatientInput
    Ambulance?: AmbulanceServiceUpdateOneRequiredWithoutPatientInput
    OxygenBank?: OxygenBankUpdateOneRequiredWithoutPatientInput
  }

  export type PatientUncheckedUpdateWithoutBloodBankInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    IsEmergency?: BoolFieldUpdateOperationsInput | boolean
    oxygenBankID?: IntFieldUpdateOperationsInput | number
    hospitalID?: IntFieldUpdateOperationsInput | number
    ambulanceServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type PatientCreateManyOxygenBankInput = {
    ID?: number
    Name: string
    IsEmergency?: boolean
    bloodBankID: number
    hospitalID: number
    ambulanceServiceId: number
  }

  export type PatientUpdateWithoutOxygenBankInput = {
    Name?: StringFieldUpdateOperationsInput | string
    IsEmergency?: BoolFieldUpdateOperationsInput | boolean
    Hospital?: HospitalUpdateOneRequiredWithoutPatientInput
    Ambulance?: AmbulanceServiceUpdateOneRequiredWithoutPatientInput
    BloodBank?: BloodBankUpdateOneRequiredWithoutPatientInput
  }

  export type PatientUncheckedUpdateWithoutOxygenBankInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    IsEmergency?: BoolFieldUpdateOperationsInput | boolean
    bloodBankID?: IntFieldUpdateOperationsInput | number
    hospitalID?: IntFieldUpdateOperationsInput | number
    ambulanceServiceId?: IntFieldUpdateOperationsInput | number
  }

  export type PatientCreateManyAmbulanceInput = {
    ID?: number
    Name: string
    IsEmergency?: boolean
    bloodBankID: number
    oxygenBankID: number
    hospitalID: number
  }

  export type PatientUpdateWithoutAmbulanceInput = {
    Name?: StringFieldUpdateOperationsInput | string
    IsEmergency?: BoolFieldUpdateOperationsInput | boolean
    Hospital?: HospitalUpdateOneRequiredWithoutPatientInput
    BloodBank?: BloodBankUpdateOneRequiredWithoutPatientInput
    OxygenBank?: OxygenBankUpdateOneRequiredWithoutPatientInput
  }

  export type PatientUncheckedUpdateWithoutAmbulanceInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    IsEmergency?: BoolFieldUpdateOperationsInput | boolean
    bloodBankID?: IntFieldUpdateOperationsInput | number
    oxygenBankID?: IntFieldUpdateOperationsInput | number
    hospitalID?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}